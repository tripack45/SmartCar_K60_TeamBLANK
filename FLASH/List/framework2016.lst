###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        21/Feb/2016  16:45:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\source\framework2016.c
#    Command line =  
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\source\framework2016.c
#        -lCN
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\FLASH\List\
#        -lB
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\FLASH\List\
#        -o
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\source\ -I
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\common\ -I
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\LPLD\ -I
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\LPLD\HW\
#        -I
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\LPLD\DEV\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\FLASH\List\framework2016.lst
#    Object file  =  
#        C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\FLASH\Obj\framework2016.o
#
###############################################################################

C:\Users\lichunchao\Documents\GitHub\SmartCar_K60_TeamBLANK\source\framework2016.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          
      8          #include "includes.h"
      9          
     10          

   \                                 In section .bss, align 1
     11          U8 ADC0_enabled = 0;
   \                     ADC0_enabled:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          U8 ADC1_enabled = 0;
   \                     ADC1_enabled:
   \   00000000                      DS8 1
     13          
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void main (void)
     16          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     17            
     18            // --- System Initiate ---
     19            
     20            __disable_irq();
   \   00000002   0xB672             CPSID    I
     21            
     22            HMI_Init();
   \   00000004   0x.... 0x....      BL       HMI_Init
     23            PIT0_Init(PIT0_PERIOD_US);
   \   00000008   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000000C   0x.... 0x....      BL       PIT0_Init
     24            PIT1_Init(PIT1_PERIOD_US);
   \   00000010   0xF644 0x6020      MOVW     R0,#+20000
   \   00000014   0x.... 0x....      BL       PIT1_Init
     25            PIT2_Init();
   \   00000018   0x.... 0x....      BL       PIT2_Init
     26            
     27            Flash_Init();
   \   0000001C   0x.... 0x....      BL       Flash_Init
     28            
     29            if(!SW2()){
   \   00000020   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD104             BNE.N    ??main_0
     30                UART_Init(921600);
   \   0000002C   0xF45F 0x2061      MOVS     R0,#+921600
   \   00000030   0x.... 0x....      BL       UART_Init
   \   00000034   0xE00E             B.N      ??main_1
     31            }else if(!SW3()){
   \                     ??main_0: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF3C0 0x1080      UBFX     R0,R0,#+6,#+1
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD104             BNE.N    ??main_2
     32                UART_Init(460800);
   \   00000042   0xF45F 0x20E1      MOVS     R0,#+460800
   \   00000046   0x.... 0x....      BL       UART_Init
   \   0000004A   0xE003             B.N      ??main_1
     33            }else{
     34                UART_Init(115200);
   \                     ??main_2: (+1)
   \   0000004C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000050   0x.... 0x....      BL       UART_Init
     35            } 
     36            UART_Configure_DMA();
   \                     ??main_1: (+1)
   \   00000054   0x.... 0x....      BL       UART_Configure_DMA
     37            UART_SetMode(UART_MODE_DMA_MANNUAL);
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      BL       UART_SetMode
     38           
     39            Motor_Init();
   \   0000005E   0x.... 0x....      BL       Motor_Init
     40            Tacho_Init();
   \   00000062   0x.... 0x....      BL       Tacho_Init
     41            Servo_Init();
   \   00000066   0x.... 0x....      BL       Servo_Init
     42            
     43          #if (CAR_TYPE==0)   // Magnet and Balance
     44            
     45            Mag_Init();
     46            LPLD_MMA8451_Init();
     47            Gyro_Init();
     48            
     49          #elif (CAR_TYPE==1)     // CCD
     50            
     51            CCD_Init();
     52            
     53          #else               // Camera
     54            
     55            Cam_Init();
   \   0000006A   0x.... 0x....      BL       Cam_Init
     56            
     57          #endif
     58            
     59            //-- Press Key 1 to Continue --
     60            Oled_Putstr(7,1,"Press Key1 to go on");
   \   0000006E   0x....             LDR.N    R2,??DataTable4_1
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x.... 0x....      BL       Oled_Putstr
     61            while (Key1());while (!Key1());
   \                     ??main_3: (+1)
   \   00000078   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD1F9             BNE.N    ??main_3
   \                     ??main_4: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD0F9             BEQ.N    ??main_4
     62            Oled_Clear();
   \   00000090   0x.... 0x....      BL       Oled_Clear
     63          /* 
     64          UART_SetMode(UART_MODE_DMA_MANNUAL);
     65            
     66          //const char welcome_msg[]="Team [BLANK], JI-SJTU";
     67          //Bluetooth_SendDataChunkSync((void*)welcome_msg,sizeof(welcome_msg)-1);
     68          //UART_SetMode(UART_MODE_DMA_CONTINUOUS);
     69           
     70            uint8 tdata[50][100]={0};
     71            uint8 *p=(uint8*)tdata;
     72            int t=sizeof(tdata);
     73            for(int i=1;i<t;i++){
     74              p[i]=p[i-1]+1;
     75            }
     76            //preparing testdata
     77            //TICK();
     78            t=1;
     79            while(t--)
     80              Bluetooth_SendDataChunkSync((uint8*)tdata,sizeof(tdata));
     81            //TOCK();*/
     82          UART_SetMode(UART_MODE_DMA_CONTINUOUS);
   \   00000094   0x2003             MOVS     R0,#+3
   \   00000096   0x.... 0x....      BL       UART_SetMode
     83          
     84            ////// System Initiated ////
     85            
     86            // --- Flash test --- 
     87            // To use this test, turn off Switch 1 first
     88            if(!SW1()){
   \   0000009A   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD141             BNE.N    ??main_5
     89              __disable_irq();
   \   000000A6   0xB672             CPSID    I
     90              Oled_Clear();
   \   000000A8   0x.... 0x....      BL       Oled_Clear
     91              Oled_Putstr(0,0,"data[1] in flash is:");
   \   000000AC   0x....             LDR.N    R2,??DataTable4_3
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      BL       Oled_Putstr
     92              Oled_Putstr(2,0,"data[1] in flash is:");
   \   000000B6   0x....             LDR.N    R2,??DataTable4_3
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x2002             MOVS     R0,#+2
   \   000000BC   0x.... 0x....      BL       Oled_Putstr
     93              Oled_Putnum(1,11,Flash_Read(0,1));
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      BL       Flash_Read
   \   000000C8   0x0002             MOVS     R2,R0
   \   000000CA   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000CC   0x210B             MOVS     R1,#+11
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x.... 0x....      BL       Oled_Putnum
     94              data[1] = Flash_Read(0,1)+1;
   \   000000D4   0x2101             MOVS     R1,#+1
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      BL       Flash_Read
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x....             LDR.N    R1,??DataTable4_4
   \   000000E0   0x8048             STRH     R0,[R1, #+2]
     95              Flash_Write(0);
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x.... 0x....      BL       Flash_Write
     96              __disable_irq();
   \   000000E8   0xB672             CPSID    I
     97              Oled_Putnum(3,11,Flash_Read(0,1));
   \   000000EA   0x2101             MOVS     R1,#+1
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x.... 0x....      BL       Flash_Read
   \   000000F2   0x0002             MOVS     R2,R0
   \   000000F4   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000F6   0x210B             MOVS     R1,#+11
   \   000000F8   0x2003             MOVS     R0,#+3
   \   000000FA   0x.... 0x....      BL       Oled_Putnum
     98              //-- Press Key 1 to Continue --
     99              Oled_Putstr(6,1,"Press Key1 to go on");
   \   000000FE   0x....             LDR.N    R2,??DataTable4_1
   \   00000100   0x2101             MOVS     R1,#+1
   \   00000102   0x2006             MOVS     R0,#+6
   \   00000104   0x.... 0x....      BL       Oled_Putstr
    100              while (Key1());
   \                     ??main_6: (+1)
   \   00000108   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xD1F9             BNE.N    ??main_6
    101              Oled_Clear();
   \   00000114   0x.... 0x....      BL       Oled_Clear
    102              ///// Flash test End///
    103              __enable_irq(); 
   \   00000118   0xB662             CPSIE    I
    104              if(!SW4()){
   \   0000011A   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
   \   0000011E   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD101             BNE.N    ??main_5
    105                Bluetooth_Configure();
   \   00000126   0x.... 0x....      BL       Bluetooth_Configure
    106              }
    107            }
    108            __enable_irq(); 
   \                     ??main_5: (+1)
   \   0000012A   0xB662             CPSIE    I
    109          
    110          
    111          
    112            while(1)
    113            {
    114              // Don't use oled or sensors' functions here !!!
    115              
    116             
    117          #if (CAR_TYPE==0)
    118              
    119            accx = Accx();    // this might be blocked , so put here instead of interrupt
    120            //accy = Accy();
    121            //accz = Accz();
    122              
    123          #elif (CAR_TYPE==2)
    124              Cam_Algorithm();    // 
   \                     ??main_7: (+1)
   \   0000012C   0x.... 0x....      BL       Cam_Algorithm
   \   00000130   0xE7FC             B.N      ??main_7
    125          #endif
    126              
    127            } 
    128          }
    129          
    130          
    131          
    132          
    133          
    134          
    135          // ===== System Interrupt Handler  ==== ( No Need to Edit )
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void BusFault_Handler(){
   \                     BusFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    139            Oled_Putstr(1,5,"Bus Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_5
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    140            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_6
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    141            while(Key1());
   \                     ??BusFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??BusFault_Handler_0
    142            
    143            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    144          }
    145          
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void NMI_Handler(){
   \                     NMI_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    148            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    149            Oled_Putstr(1,5,"NMI Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_7
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    150            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_6
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    151            while(Key1());
   \                     ??NMI_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??NMI_Handler_0
    152            
    153            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    154          }
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void HardFault_Handler(void)
    157          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    158            //LED1_Tog();
    159            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    160            Oled_Putstr(1,5,"Hard Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_8
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    161            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_6
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    162            while(Key1());
   \                     ??HardFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??HardFault_Handler_0
    163            
    164            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    165          }
    166          
    167          

   \                                 In section .text, align 2, keep-with-next
    168          void DefaultISR(void)
    169          {
   \                     DefaultISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    170            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    171            Oled_Putstr(1,5,"Default ISR");
   \   00000006   0x....             LDR.N    R2,??DataTable4_9
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    172            Oled_Putstr(4,2,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_6
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    173            while(Key1());
   \                     ??DefaultISR_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??DefaultISR_0
    174          
    175            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x400FF090         DC32     0x400ff090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     `data`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Press Key1 to go on"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x20 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x64 0x61          DC8 "data[1] in flash is:"
   \              0x74 0x61    
   \              0x5B 0x31    
   \              0x5D 0x20    
   \              0x69 0x6E    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x69    
   \              0x73 0x3A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x42 0x75          DC8 "Bus Fault"
   \              0x73 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x70 0x72          DC8 "press Key1 to goon"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x6F 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x4E 0x4D          DC8 "NMI Fault"
   \              0x49 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x48 0x61          DC8 "Hard Fault"
   \              0x72 0x64    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x44 0x65          DC8 "Default ISR"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x49 0x53    
   \              0x52 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BusFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   DefaultISR
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   HardFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   NMI_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   main
         8   -> Bluetooth_Configure
         8   -> Cam_Algorithm
         8   -> Cam_Init
         8   -> Flash_Init
         8   -> Flash_Read
         8   -> Flash_Write
         8   -> HMI_Init
         8   -> Motor_Init
         8   -> Oled_Clear
         8   -> Oled_Putnum
         8   -> Oled_Putstr
         8   -> PIT0_Init
         8   -> PIT1_Init
         8   -> PIT2_Init
         8   -> Servo_Init
         8   -> Tacho_Init
         8   -> UART_Configure_DMA
         8   -> UART_Init
         8   -> UART_SetMode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      20  ?_0
      24  ?_1
      12  ?_2
      20  ?_3
      12  ?_4
      12  ?_5
      12  ?_6
       1  ADC0_enabled
       1  ADC1_enabled
      40  BusFault_Handler
      40  DefaultISR
      40  HardFault_Handler
      40  NMI_Handler
     306  main

 
   2 bytes in section .bss
 112 bytes in section .rodata
 506 bytes in section .text
 
 506 bytes of CODE  memory
 112 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
