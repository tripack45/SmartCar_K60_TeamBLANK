###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        18/Feb/2016  02:09:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\freescale_racing\framework2016\source\framework2016.c
#    Command line =  
#        E:\freescale_racing\framework2016\source\framework2016.c -lCN
#        E:\freescale_racing\framework2016\FLASH\List\ -lB
#        E:\freescale_racing\framework2016\FLASH\List\ -o
#        E:\freescale_racing\framework2016\FLASH\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\freescale_racing\framework2016\source\ -I
#        E:\freescale_racing\framework2016\common\ -I
#        E:\freescale_racing\framework2016\LPLD\ -I
#        E:\freescale_racing\framework2016\LPLD\HW\ -I
#        E:\freescale_racing\framework2016\LPLD\DEV\ -Ol -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        E:\freescale_racing\framework2016\FLASH\List\framework2016.lst
#    Object file  =  
#        E:\freescale_racing\framework2016\FLASH\Obj\framework2016.o
#
###############################################################################

E:\freescale_racing\framework2016\source\framework2016.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          
      8          #include "includes.h"
      9          
     10          

   \                                 In section .bss, align 1
     11          U8 ADC0_enabled = 0;
   \                     ADC0_enabled:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          U8 ADC1_enabled = 0;
   \                     ADC1_enabled:
   \   00000000                      DS8 1
     13          
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void main (void)
     16          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     17            
     18            // --- System Initiate ---
     19            
     20            __disable_irq();
   \   00000004   0xB672             CPSID    I
     21            
     22            HMI_Init();
   \   00000006   0x.... 0x....      BL       HMI_Init
     23            PIT0_Init(PIT0_PERIOD_US);
   \   0000000A   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000000E   0x.... 0x....      BL       PIT0_Init
     24            PIT1_Init(PIT1_PERIOD_US);
   \   00000012   0xF644 0x6020      MOVW     R0,#+20000
   \   00000016   0x.... 0x....      BL       PIT1_Init
     25            PIT2_Init();
   \   0000001A   0x.... 0x....      BL       PIT2_Init
     26            
     27            Flash_Init();
   \   0000001E   0x.... 0x....      BL       Flash_Init
     28            
     29            if(!SW2()){
   \   00000022   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD104             BNE.N    ??main_0
     30                UART_Init(921600);
   \   0000002E   0xF45F 0x2061      MOVS     R0,#+921600
   \   00000032   0x.... 0x....      BL       UART_Init
   \   00000036   0xE00E             B.N      ??main_1
     31            }else if(!SW3()){
   \                     ??main_0: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF3C0 0x1080      UBFX     R0,R0,#+6,#+1
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD104             BNE.N    ??main_2
     32                UART_Init(460800);
   \   00000044   0xF45F 0x20E1      MOVS     R0,#+460800
   \   00000048   0x.... 0x....      BL       UART_Init
   \   0000004C   0xE003             B.N      ??main_1
     33            }else{
     34                UART_Init(115200);
   \                     ??main_2: (+1)
   \   0000004E   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000052   0x.... 0x....      BL       UART_Init
     35            } 
     36            UART_Configure_DMA();
   \                     ??main_1: (+1)
   \   00000056   0x.... 0x....      BL       UART_Configure_DMA
     37            UART_SetMode(UART_MODE_DMA_CONTINUOUS);
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x.... 0x....      BL       UART_SetMode
     38           
     39            Motor_Init();
   \   00000060   0x.... 0x....      BL       Motor_Init
     40            Tacho_Init();
   \   00000064   0x.... 0x....      BL       Tacho_Init
     41            Servo_Init();
   \   00000068   0x.... 0x....      BL       Servo_Init
     42            
     43          #if (CAR_TYPE==0)   // Magnet and Balance
     44            
     45            Mag_Init();
     46            LPLD_MMA8451_Init();
     47            Gyro_Init();
     48            
     49          #elif (CAR_TYPE==1)     // CCD
     50            
     51            CCD_Init();
     52            
     53          #else               // Camera
     54            
     55            Cam_Init();
   \   0000006C   0x.... 0x....      BL       Cam_Init
     56            
     57          #endif
     58            
     59            //-- Press Key 1 to Continue --
     60            Oled_Putstr(7,1,"Press Key1 to go on");
   \   00000070   0x....             LDR.N    R2,??DataTable4_1
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x.... 0x....      BL       Oled_Putstr
     61            while (Key1());while (!Key1());
   \                     ??main_3: (+1)
   \   0000007A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD1F9             BNE.N    ??main_3
   \                     ??main_4: (+1)
   \   00000086   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD0F9             BEQ.N    ??main_4
     62            Oled_Clear();
   \   00000092   0x.... 0x....      BL       Oled_Clear
     63           
     64          UART_SetMode(UART_MODE_DMA_MANNUAL);
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x.... 0x....      BL       UART_SetMode
     65            
     66          const char welcome_msg[]="Team [BLANK], JI-SJTU";
   \   0000009C   0xA800             ADD      R0,SP,#+0
   \   0000009E   0x....             LDR.N    R1,??DataTable4_3
   \   000000A0   0x2218             MOVS     R2,#+24
   \   000000A2   0x.... 0x....      BL       __aeabi_memcpy4
     67          Bluetooth_SendDataChunkSync((void*)welcome_msg,sizeof(welcome_msg)-1);
   \   000000A6   0x2115             MOVS     R1,#+21
   \   000000A8   0xA800             ADD      R0,SP,#+0
   \   000000AA   0x.... 0x....      BL       Bluetooth_SendDataChunkSync
     68          
     69          UART_SetMode(UART_MODE_DMA_CONTINUOUS);
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0x.... 0x....      BL       UART_SetMode
     70            /*
     71            uint8 tdata[50][100]={0};
     72            uint8 *p=(uint8*)tdata;
     73            int t=sizeof(tdata);
     74            for(int i=1;i<t;i++){
     75              p[i]=p[i-1]+1;
     76            }
     77            //preparing testdata
     78            //t=3;
     79            //while(t--)
     80              Bluetooth_SendDataChunkSync((uint8*)tdata,sizeof(tdata));
     81            */
     82              
     83            ////// System Initiated ////
     84            
     85            // --- Flash test --- 
     86            // To use this test, turn off Switch 1 first
     87            if(!SW1()){
   \   000000B4   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD141             BNE.N    ??main_5
     88              __disable_irq();
   \   000000C0   0xB672             CPSID    I
     89              Oled_Clear();
   \   000000C2   0x.... 0x....      BL       Oled_Clear
     90              Oled_Putstr(0,0,"data[1] in flash is:");
   \   000000C6   0x....             LDR.N    R2,??DataTable4_4
   \   000000C8   0x2100             MOVS     R1,#+0
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x.... 0x....      BL       Oled_Putstr
     91              Oled_Putstr(2,0,"data[1] in flash is:");
   \   000000D0   0x....             LDR.N    R2,??DataTable4_4
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x.... 0x....      BL       Oled_Putstr
     92              Oled_Putnum(1,11,Flash_Read(0,1));
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x.... 0x....      BL       Flash_Read
   \   000000E2   0x0002             MOVS     R2,R0
   \   000000E4   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000E6   0x210B             MOVS     R1,#+11
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0x.... 0x....      BL       Oled_Putnum
     93              data[1] = Flash_Read(0,1)+1;
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x.... 0x....      BL       Flash_Read
   \   000000F6   0x1C40             ADDS     R0,R0,#+1
   \   000000F8   0x....             LDR.N    R1,??DataTable4_5
   \   000000FA   0x8048             STRH     R0,[R1, #+2]
     94              Flash_Write(0);
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x.... 0x....      BL       Flash_Write
     95              __disable_irq();
   \   00000102   0xB672             CPSID    I
     96              Oled_Putnum(3,11,Flash_Read(0,1));
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x.... 0x....      BL       Flash_Read
   \   0000010C   0x0002             MOVS     R2,R0
   \   0000010E   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000110   0x210B             MOVS     R1,#+11
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0x.... 0x....      BL       Oled_Putnum
     97              //-- Press Key 1 to Continue --
     98              Oled_Putstr(6,1,"Press Key1 to go on");
   \   00000118   0x....             LDR.N    R2,??DataTable4_1
   \   0000011A   0x2101             MOVS     R1,#+1
   \   0000011C   0x2006             MOVS     R0,#+6
   \   0000011E   0x.... 0x....      BL       Oled_Putstr
     99              while (Key1());
   \                     ??main_6: (+1)
   \   00000122   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD1F9             BNE.N    ??main_6
    100              Oled_Clear();
   \   0000012E   0x.... 0x....      BL       Oled_Clear
    101              ///// Flash test End///
    102              __enable_irq(); 
   \   00000132   0xB662             CPSIE    I
    103              if(!SW4()){
   \   00000134   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff090
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD101             BNE.N    ??main_5
    104                Bluetooth_Configure();
   \   00000140   0x.... 0x....      BL       Bluetooth_Configure
    105              }
    106            }
    107            __enable_irq(); 
   \                     ??main_5: (+1)
   \   00000144   0xB662             CPSIE    I
    108          
    109          
    110          
    111            while(1)
    112            {
    113              // Don't use oled or sensors' functions here !!!
    114              
    115             
    116          #if (CAR_TYPE==0)
    117              
    118            accx = Accx();    // this might be blocked , so put here instead of interrupt
    119            //accy = Accy();
    120            //accz = Accz();
    121              
    122          #elif (CAR_TYPE==2)
    123              Cam_Algorithm();    // 
   \                     ??main_7: (+1)
   \   00000146   0x.... 0x....      BL       Cam_Algorithm
   \   0000014A   0xE7FC             B.N      ??main_7
    124          #endif
    125              
    126            } 
    127          }
    128          
    129          
    130          
    131          
    132          
    133          
    134          // ===== System Interrupt Handler  ==== ( No Need to Edit )
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void BusFault_Handler(){
   \                     BusFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    137            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    138            Oled_Putstr(1,5,"Bus Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_6
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    139            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_7
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    140            while(Key1());
   \                     ??BusFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??BusFault_Handler_0
    141            
    142            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    143          }
    144          
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void NMI_Handler(){
   \                     NMI_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    147            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    148            Oled_Putstr(1,5,"NMI Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_8
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    149            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_7
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    150            while(Key1());
   \                     ??NMI_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??NMI_Handler_0
    151            
    152            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    153          }
    154          

   \                                 In section .text, align 2, keep-with-next
    155          void HardFault_Handler(void)
    156          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    157            //LED1_Tog();
    158            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    159            Oled_Putstr(1,5,"Hard Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_9
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    160            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_7
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    161            while(Key1());
   \                     ??HardFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??HardFault_Handler_0
    162            
    163            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    164          }
    165          
    166          

   \                                 In section .text, align 2, keep-with-next
    167          void DefaultISR(void)
    168          {
   \                     DefaultISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    169            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    170            Oled_Putstr(1,5,"Default ISR");
   \   00000006   0x....             LDR.N    R2,??DataTable4_10
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    171            Oled_Putstr(4,2,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_7
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    172            while(Key1());
   \                     ??DefaultISR_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??DefaultISR_0
    173          
    174            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    175          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x400FF090         DC32     0x400ff090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     `data`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Press Key1 to go on"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x20 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x54 0x65          DC8 "Team [BLANK], JI-SJTU"
   \              0x61 0x6D    
   \              0x20 0x5B    
   \              0x42 0x4C    
   \              0x41 0x4E    
   \              0x4B 0x5D    
   \              0x2C 0x20    
   \              0x4A 0x49    
   \              0x2D 0x53    
   \              0x4A 0x54    
   \              0x55 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x64 0x61          DC8 "data[1] in flash is:"
   \              0x74 0x61    
   \              0x5B 0x31    
   \              0x5D 0x20    
   \              0x69 0x6E    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x69    
   \              0x73 0x3A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x42 0x75          DC8 "Bus Fault"
   \              0x73 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x70 0x72          DC8 "press Key1 to goon"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x6F 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x4E 0x4D          DC8 "NMI Fault"
   \              0x49 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x48 0x61          DC8 "Hard Fault"
   \              0x72 0x64    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x44 0x65          DC8 "Default ISR"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x49 0x53    
   \              0x52 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BusFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   DefaultISR
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   HardFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   NMI_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
      32   main
        32   -> Bluetooth_Configure
        32   -> Bluetooth_SendDataChunkSync
        32   -> Cam_Algorithm
        32   -> Cam_Init
        32   -> Flash_Init
        32   -> Flash_Read
        32   -> Flash_Write
        32   -> HMI_Init
        32   -> Motor_Init
        32   -> Oled_Clear
        32   -> Oled_Putnum
        32   -> Oled_Putstr
        32   -> PIT0_Init
        32   -> PIT1_Init
        32   -> PIT2_Init
        32   -> Servo_Init
        32   -> Tacho_Init
        32   -> UART_Configure_DMA
        32   -> UART_Init
        32   -> UART_SetMode
        32   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      20  ?_0
      24  ?_1
      24  ?_2
      12  ?_3
      20  ?_4
      12  ?_5
      12  ?_6
      12  ?_7
       1  ADC0_enabled
       1  ADC1_enabled
      40  BusFault_Handler
      40  DefaultISR
      40  HardFault_Handler
      40  NMI_Handler
     332  main

 
   2 bytes in section .bss
 136 bytes in section .rodata
 536 bytes in section .text
 
 536 bytes of CODE  memory
 136 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
