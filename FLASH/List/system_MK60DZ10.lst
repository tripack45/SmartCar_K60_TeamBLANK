###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        18/Feb/2016  13:11:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\common\system_MK60DZ10.c
#    Command line =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\common\system_MK60DZ10.c
#        -lCN E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\ -lB
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\ -o
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --char_is_signed --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\source\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\common\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\HW\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\DEV\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\system_MK60DZ10.lst
#    Object file  =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\Obj\system_MK60DZ10.o
#
###############################################################################

E:\freescale_racing\SmartCar_K60_TeamBLANK\common\system_MK60DZ10.c
      1          /**
      2           * @file system_MK60DZ10.c
      3           * @version 1.2.1[By LPLD]
      4           * @date 2013-06-18
      5           * @brief MK60DZ10系列单片机系统配置文件
      6           *
      7           * 更改建议:禁止修改
      8           *
      9           * 该代码提供系统配置函数以及一个储存系统主频的全局变量。
     10           * 配置函数主要负责建立系统各模块的时钟。
     11           * 代码还实现常见的系统中断函数。
     12           *
     13           * 版权所有:北京拉普兰德电子技术有限公司
     14           * http://www.lpld.cn
     15           * mail:support@lpld.cn
     16           *
     17           * @par
     18           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     19           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     20           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     21           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     22           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     23           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     24           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     25           *
     26           *  Modified by Qian Qiyang(KisaragiAyanoo@twitter)
     27           *  Date : 2015/12/01
     28           */
     29          
     30          #include <stdint.h>
     31          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriorityGrouping(uint32_t)
   \                     NVIC_SetPriorityGrouping: (+1)
   \   00000000   0xF010 0x0107      ANDS     R1,R0,#0x7
   \   00000004   0x....             LDR.N    R0,??DataTable2_1  ;; 0xe000ed0c
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF64F 0x02FF      MOVW     R2,#+63743
   \   0000000C   0x4010             ANDS     R0,R2,R0
   \   0000000E   0x....             LDR.N    R2,??DataTable2_2  ;; 0x5fa0000
   \   00000010   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000014   0x4308             ORRS     R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable2_1  ;; 0xe000ed0c
   \   00000018   0x6008             STR      R0,[R1, #+0]
   \   0000001A   0x4770             BX       LR               ;; return
     32          
     33          #include "OLED.h"
     34          #include "Setting.h"
     35          
     36          /*----------------------------------------------------------------------------
     37            定义时钟相关值
     38           *----------------------------------------------------------------------------*/
     39          #define CPU_XTAL_CLK_HZ                 50000000u       //外部有源晶振频率，单位Hz
     40          #define CPU_XTAL32k_CLK_HZ              32768u          //外部32k时钟晶振频率，单位Hz    
     41          #define CPU_INT_SLOW_CLK_HZ             32768u          //慢速内部振荡器的值，单位Hz
     42          #define CPU_INT_FAST_CLK_HZ             4000000u        //快速内部振荡器的值，单位Hz
     43          #define DEFAULT_SYSTEM_CLOCK            100000000u      //默认系统主频，单位Hz
     44          
     45          /**
     46           * @brief 系统主频（单位Hz）
     47           */

   \                                 In section .data, align 4
     48          uint32_t SystemCoreClock = DEFAULT_SYSTEM_CLOCK;
   \                     SystemCoreClock:
   \   00000000   0x05F5E100         DC32 100000000
     49          
     50          
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void SystemInit (void) {
   \                     SystemInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     53            
     54            SIM->SCGC5 |= (SIM_SCGC5_PORTA_MASK
     55                        | SIM_SCGC5_PORTB_MASK
     56                        | SIM_SCGC5_PORTC_MASK
     57                        | SIM_SCGC5_PORTD_MASK
     58                        | SIM_SCGC5_PORTE_MASK );
   \   00000002   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   0000000A   0x....             LDR.N    R1,??DataTable2_3  ;; 0x40048038
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     59            
     60            WDOG->UNLOCK = (uint16_t)0xC520u;
   \   0000000E   0xF24C 0x5020      MOVW     R0,#+50464
   \   00000012   0x....             LDR.N    R1,??DataTable2_4  ;; 0x4005200e
   \   00000014   0x8008             STRH     R0,[R1, #+0]
     61            WDOG->UNLOCK  = (uint16_t)0xD928u; 
   \   00000016   0xF64D 0x1028      MOVW     R0,#+55592
   \   0000001A   0x....             LDR.N    R1,??DataTable2_4  ;; 0x4005200e
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
     62            /* WDOG_STCTRLH: ??=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,??=0,STNDBYEN=1,WAITEN=1,STOPEN=1,DBGEN=0,ALLOWUPDATE=1,WINEN=0,IRQRSTEN=0,CLKSRC=1,WDOGEN=0 */
     63            WDOG->STCTRLH = (uint16_t)0x01D2u;
   \   0000001E   0xF44F 0x70E9      MOV      R0,#+466
   \   00000022   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40052000
   \   00000024   0x8008             STRH     R0,[R1, #+0]
     64            
     65            common_relocate();
   \   00000026   0x.... 0x....      BL       common_relocate
     66            
     67            LPLD_PLL_Setup(CORE_CLK_MHZ);
   \   0000002A   0x2064             MOVS     R0,#+100
   \   0000002C   0x.... 0x....      BL       LPLD_PLL_Setup
     68            
     69            SystemCoreClockUpdate();
   \   00000030   0x.... 0x....      BL       SystemCoreClockUpdate
     70            
     71            g_core_clock = SystemCoreClock;
   \   00000034   0x....             LDR.N    R0,??DataTable2_6
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x....             LDR.N    R1,??DataTable2_7
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     72            g_bus_clock = g_core_clock / ((uint32_t)((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> SIM_CLKDIV1_OUTDIV2_SHIFT)+ 1u);
   \   0000003C   0x....             LDR.N    R0,??DataTable2_7
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x....             LDR.N    R1,??DataTable2_8  ;; 0x40048044
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0xF3C1 0x6103      UBFX     R1,R1,#+24,#+4
   \   00000048   0x1C49             ADDS     R1,R1,#+1
   \   0000004A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000004E   0x....             LDR.N    R1,??DataTable2_9
   \   00000050   0x6008             STR      R0,[R1, #+0]
     73            g_flexbus_clock =  g_core_clock / ((uint32_t)((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV3_MASK) >> SIM_CLKDIV1_OUTDIV3_SHIFT)+ 1u);
   \   00000052   0x....             LDR.N    R0,??DataTable2_7
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x....             LDR.N    R1,??DataTable2_8  ;; 0x40048044
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0xF3C1 0x5103      UBFX     R1,R1,#+20,#+4
   \   0000005E   0x1C49             ADDS     R1,R1,#+1
   \   00000060   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000064   0x....             LDR.N    R1,??DataTable2_10
   \   00000066   0x6008             STR      R0,[R1, #+0]
     74            g_flash_clock =  g_core_clock / ((uint32_t)((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV4_MASK) >> SIM_CLKDIV1_OUTDIV4_SHIFT)+ 1u);
   \   00000068   0x....             LDR.N    R0,??DataTable2_7
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x....             LDR.N    R1,??DataTable2_8  ;; 0x40048044
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0xF3C1 0x4103      UBFX     R1,R1,#+16,#+4
   \   00000074   0x1C49             ADDS     R1,R1,#+1
   \   00000076   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000007A   0x....             LDR.N    R1,??DataTable2_11
   \   0000007C   0x6008             STR      R0,[R1, #+0]
     75            
     76            // ==== Init Oled ===
     77            
     78            Oled_Init();
   \   0000007E   0x.... 0x....      BL       Oled_Init
     79            Oled_Putstr(1,3,"<< Clock Init >>");
   \   00000082   0x....             LDR.N    R2,??DataTable2_12
   \   00000084   0x2103             MOVS     R1,#+3
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       Oled_Putstr
     80            Oled_Putstr(2,1,"Bus Clk");
   \   0000008C   0x....             LDR.N    R2,??DataTable2_13
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x2002             MOVS     R0,#+2
   \   00000092   0x.... 0x....      BL       Oled_Putstr
     81            Oled_Putnum(2,9,g_bus_clock/1000000);
   \   00000096   0x....             LDR.N    R0,??DataTable2_9
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x....             LDR.N    R1,??DataTable2_14  ;; 0xf4240
   \   0000009C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000A0   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000A2   0x2109             MOVS     R1,#+9
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x.... 0x....      BL       Oled_Putnum
     82            Oled_Putstr(2,18,"MHz");
   \   000000AA   0x....             ADR.N    R2,??DataTable2  ;; "MHz"
   \   000000AC   0x2112             MOVS     R1,#+18
   \   000000AE   0x2002             MOVS     R0,#+2
   \   000000B0   0x.... 0x....      BL       Oled_Putstr
     83            Oled_Putstr(3,1,"UART Speed");
   \   000000B4   0x....             LDR.N    R2,??DataTable2_15
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0x2003             MOVS     R0,#+3
   \   000000BA   0x.... 0x....      BL       Oled_Putstr
     84            Oled_Putstr(4,1,"None:115200");
   \   000000BE   0x....             LDR.N    R2,??DataTable2_16
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x2004             MOVS     R0,#+4
   \   000000C4   0x.... 0x....      BL       Oled_Putstr
     85            Oled_Putstr(5,1,"SW2:921600");
   \   000000C8   0x....             LDR.N    R2,??DataTable2_17
   \   000000CA   0x2101             MOVS     R1,#+1
   \   000000CC   0x2005             MOVS     R0,#+5
   \   000000CE   0x.... 0x....      BL       Oled_Putstr
     86            Oled_Putstr(6,1,"SW3:460800");
   \   000000D2   0x....             LDR.N    R2,??DataTable2_18
   \   000000D4   0x2101             MOVS     R1,#+1
   \   000000D6   0x2006             MOVS     R0,#+6
   \   000000D8   0x.... 0x....      BL       Oled_Putstr
     87            
     88            
     89            NVIC_SetPriorityGrouping(NVIC_GROUP);
   \   000000DC   0x2005             MOVS     R0,#+5
   \   000000DE   0x.... 0x....      BL       NVIC_SetPriorityGrouping
     90          }
   \   000000E2   0xBD01             POP      {R0,PC}          ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void SystemCoreClockUpdate (void) {
     93            uint32_t temp;
     94            temp =  CPU_XTAL_CLK_HZ *((uint32_t)(MCG->C6 & MCG_C6_VDIV_MASK) + 24u );
   \                     SystemCoreClockUpdate: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_19  ;; 0x40064005
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000A   0x3018             ADDS     R0,R0,#+24
   \   0000000C   0x....             LDR.N    R1,??DataTable2_20  ;; 0x2faf080
   \   0000000E   0x4348             MULS     R0,R1,R0
     95            temp = (uint32_t)(temp/((uint32_t)(MCG->C5 & MCG_C5_PRDIV_MASK) +1u ));
   \   00000010   0x....             LDR.N    R1,??DataTable2_21  ;; 0x40064004
   \   00000012   0x7809             LDRB     R1,[R1, #+0]
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
     96            SystemCoreClock = temp;
   \   00000020   0x....             LDR.N    R1,??DataTable2_6
   \   00000022   0x6008             STR      R0,[R1, #+0]
     97          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4D 0x48          DC8      "MHz"
   \              0x7A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4005200E         DC32     0x4005200e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40052000         DC32     0x40052000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     g_core_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     g_flexbus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     g_flash_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x40064005         DC32     0x40064005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x02FAF080         DC32     0x2faf080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x3C 0x3C          DC8 "<< Clock Init >>"
   \              0x20 0x43    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x3E 0x3E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x42 0x75          DC8 "Bus Clk"
   \              0x73 0x20    
   \              0x43 0x6C    
   \              0x6B 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x4D 0x48          DC8 "MHz"
   \              0x7A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x55 0x41          DC8 "UART Speed"
   \              0x52 0x54    
   \              0x20 0x53    
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x4E 0x6F          DC8 "None:115200"
   \              0x6E 0x65    
   \              0x3A 0x31    
   \              0x31 0x35    
   \              0x32 0x30    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x53 0x57          DC8 "SW2:921600"
   \              0x32 0x3A    
   \              0x39 0x32    
   \              0x31 0x36    
   \              0x30 0x30    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x53 0x57          DC8 "SW3:460800"
   \              0x33 0x3A    
   \              0x34 0x36    
   \              0x30 0x38    
   \              0x30 0x30    
   \              0x00         
   \   0000000B   0x00               DC8 0
     98          
     99          
    100          
    101          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_SetPriorityGrouping
       0   SystemCoreClockUpdate
       8   SystemInit
         8   -> LPLD_PLL_Setup
         8   -> NVIC_SetPriorityGrouping
         8   -> Oled_Init
         8   -> Oled_Putnum
         8   -> Oled_Putstr
         8   -> SystemCoreClockUpdate
         8   -> common_relocate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      20  ?_0
       8  ?_1
       4  ?_2
      12  ?_3
      12  ?_4
      12  ?_5
      12  ?_6
      28  NVIC_SetPriorityGrouping
       4  SystemCoreClock
      38  SystemCoreClockUpdate
     228  SystemInit

 
   4 bytes in section .data
  80 bytes in section .rodata
 382 bytes in section .text
 
 382 bytes of CODE  memory
  80 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
