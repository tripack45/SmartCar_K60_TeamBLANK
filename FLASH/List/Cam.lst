###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        21/Feb/2016  14:16:12
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\freescale_racing\SmartCar_K60_TeamBLANK\source\Cam.c
#    Command line =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\source\Cam.c -lCN
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\ -lB
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\ -o
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --char_is_signed --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\source\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\common\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\HW\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\DEV\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\Cam.lst
#    Object file  =  E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\Obj\Cam.o
#
###############################################################################

E:\freescale_racing\SmartCar_K60_TeamBLANK\source\Cam.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          #include "includes.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD509             BPL.N    ??NVIC_SetPriority_0
   \   00000006   0x0109             LSLS     R1,R1,#+4
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable6_1  ;; 0xe000ed18
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000012   0x1880             ADDS     R0,R0,R2
   \   00000014   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \   00000018   0xE004             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   0000001A   0x0109             LSLS     R1,R1,#+4
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable6_2  ;; 0xe000e400
   \   00000020   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000022   0x5481             STRB     R1,[R0, R2]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000006   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \   0000000A   0x2B05             CMP      R3,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \   0000000E   0x2304             MOVS     R3,#+4
   \   00000010   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0: (+1)
   \   00000012   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1: (+1)
   \   00000016   0x1D04             ADDS     R4,R0,#+4
   \   00000018   0x2C07             CMP      R4,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2: (+1)
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3: (+1)
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xFA14 0xF303      LSLS     R3,R4,R3
   \   00000028   0x1E5B             SUBS     R3,R3,#+1
   \   0000002A   0x4019             ANDS     R1,R3,R1
   \   0000002C   0x4081             LSLS     R1,R1,R0
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0xBC10             POP      {R4}
   \   0000003C   0x4770             BX       LR               ;; return
      8          #define SIG_SIZE 3
      9          
     10          #define VALID_COLS IMG_COLS
     11          
     12          // ====== Variables ======
     13          
     14          // ---- Local ----

   \                                 In section .bss, align 1
     15          u8 cam_row = 0, img_row = 0;
   \                     cam_row:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     img_row:
   \   00000000                      DS8 1
     16          
     17          

   \                                 In section .bss, align 4
     18          u8 cam_buffer0[ IMG_ROWS * IMG_COLS + 2 * SIG_SIZE ];
   \                     cam_buffer0:
   \   00000000                      DS8 4908

   \                                 In section .bss, align 4
     19          u8 cam_buffer1[ IMG_ROWS * IMG_COLS + 2 * SIG_SIZE ];
   \                     cam_buffer1:
   \   00000000                      DS8 4908

   \                                 In section .bss, align 4
     20          u8 cam_buffer2[ IMG_ROWS * IMG_COLS + 2 * SIG_SIZE ];
   \                     cam_buffer2:
   \   00000000                      DS8 4908

   \                                 In section .bss, align 4
     21          u8 cam_buffer3[ IMG_ROWS * IMG_COLS + 2 * SIG_SIZE ];
   \                     cam_buffer3:
   \   00000000                      DS8 4908
     22          

   \                                 In section .data, align 4
     23          u8* buffer_ptr[4]={ cam_buffer0+SIG_SIZE, cam_buffer1+SIG_SIZE,
   \                     buffer_ptr:
   \   00000000   0x........         DC32 cam_buffer0 + 3H, cam_buffer1 + 3H, cam_buffer2 + 3H
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 cam_buffer3 + 3H
     24                              cam_buffer2+SIG_SIZE, cam_buffer3+SIG_SIZE };
     25          
     26          // ---- Global ----

   \                                 In section .bss, align 4
     27          int processing_frame; //Currently processing frame
   \                     processing_frame:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     28          int loading_frame; //Currently loading frame
   \                     loading_frame:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     29          int sending_frame; //Currently sending frame
   \                     sending_frame:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     30          int last_processed_frame, last_sent_frame;
   \                     last_processed_frame:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     last_sent_frame:
   \   00000000                      DS8 4
     31          

   \                                 In section .bss, align 4
     32          int process_diff,load_diff,send_diff;
   \                     process_diff:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     load_diff:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     send_diff:
   \   00000000                      DS8 4
     33          

   \                                 In section .data, align 4
     34          u8  *sending_buffer=(void*)(cam_buffer3+SIG_SIZE);
   \                     sending_buffer:
   \   00000000   0x........         DC32 cam_buffer3 + 3H

   \                                 In section .data, align 4
     35          u8  (*loading_buffer)[IMG_COLS]=(void*)(cam_buffer0+SIG_SIZE);
   \                     loading_buffer:
   \   00000000   0x........         DC32 cam_buffer0 + 3H

   \                                 In section .data, align 4
     36          u8  (*img_buffer)[IMG_COLS]=(void*)(cam_buffer0+SIG_SIZE); 
   \                     img_buffer:
   \   00000000   0x........         DC32 cam_buffer0 + 3H
     37          

   \                                 In section .bss, align 1
     38          u8 current_frame_indicator=0; //Indicates buffer being loaded
   \                     current_frame_indicator:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     39          u8 last_frame_indicator=3;    //Indicates last loaded buffer
   \                     last_frame_indicator:
   \   00000000   0x03               DC8 3

   \                                 In section .bss, align 1
     40          u8 processing_frame_indicator=0;//frame_currently being processed
   \                     processing_frame_indicator:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     41          u8 sending_frame_indicator=0;//frame_currently being processed
   \                     sending_frame_indicator:
   \   00000000                      DS8 1
     42          
     43          
     44          //===========================LOCKING MACHANISM=================
     45          /*Here implements locking mechanism.
     46          There are 3 types of locks:
     47          ProcessLock, SendLock, LastFrameLock
     48          They are implemented in a bit wise number LockState:
     49          LockState: 0000  0000   0000   0000
     50          NONE   PLock  SLock LFLock
     51          WARNING: 
     52          No access(Read/Write) is allowed after releasing the lock!
     53          Illegal access will not be stopped but will result in 
     54          undefined behavior! 
     55          */
     56          
     57          #define PLOCK_BASE 8
     58          #define SLOCK_BASE 4
     59          #define LFLOCK_BASE 0
     60          #define LOCK_MASK(base,x) (1 << (base + x) )
     61          #define IS_LOCK_TYPE(base,x) (LockState & LOCK_MASK(base,x) )
     62          #define IS_LOCK(x) (LockState &(  LOCK_MASK(PLOCK_BASE, x) \
     63                                          | LOCK_MASK(SLOCK_BASE, x) \
     64                                          | LOCK_MASK(LFLOCK_BASE,x) ))
     65          #define GET_FREE_LOCK() (IS_LOCK(0) ? ( \
     66                                      IS_LOCK(1) ? (\
     67                                        ( IS_LOCK(2) ?  3 : 2 ) \
     68                                      ) : 1 \
     69                                 ) : 0 )
     70          #define SET_LOCK(base, x) LockState |= LOCK_MASK(base, x)
     71          #define CLEAR_LOCK(base) LockState &= ~( 0x0f <<base );
     72          #define CLEAR_ALL_LOCK() LockState = 0;

   \                                 In section .data, align 4
     73          U32 LockState=LOCK_MASK(PLOCK_BASE,0)| 
   \                     LockState:
   \   00000000   0x00000188         DC32 392
     74                        LOCK_MASK(SLOCK_BASE,3) |
     75                          LOCK_MASK(LFLOCK_BASE,3); 
     76          // =========================LOCKING MACHANISM OVER==============
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void Cam_Algorithm(){
   \                     Cam_Algorithm: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     79            
     80            
     81            //This pointer points to corresponding frame buffer
     82            
     83            u32 img_row_used;
     84            for(img_row_used = 0; img_row_used < IMG_ROWS; img_row_used++){
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xE037             B.N      ??Cam_Algorithm_0
     85              // For every row:
     86              while( (img_row_used >= img_row % IMG_ROWS) 
     87                  && (processing_frame == loading_frame)  );
   \                     ??Cam_Algorithm_1: (+1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000000A   0x7809             LDRB     R1,[R1, #+0]
   \   0000000C   0x2232             MOVS     R2,#+50
   \   0000000E   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000012   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD307             BCC.N    ??Cam_Algorithm_2
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable6_4
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   00000024   0x6812             LDR      R2,[R2, #+0]
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xD0ED             BEQ.N    ??Cam_Algorithm_1
     88              //Cannot process on going row, wait until img_row over img_row_used
     89              //The current processing row must be the row just recieved
     90              
     91              if( img_row_used == 0 ){
   \                     ??Cam_Algorithm_2: (+1)
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD122             BNE.N    ??Cam_Algorithm_3
     92                //If this is the first row, tag the current processing frame
     93                processing_frame=loading_frame;
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable6_4
   \   00000038   0x6011             STR      R1,[R2, #+0]
     94                processing_frame_indicator=current_frame_indicator;
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   0000003E   0x7809             LDRB     R1,[R1, #+0]
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable6_7
   \   00000044   0x7011             STRB     R1,[R2, #+0]
     95                //Locking the buffer
     96                SET_LOCK(PLOCK_BASE,processing_frame_indicator);
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0x2201             MOVS     R2,#+1
   \   0000004E   0x.... 0x....      LDR.W    R3,??DataTable6_7
   \   00000052   0x781B             LDRB     R3,[R3, #+0]
   \   00000054   0x3308             ADDS     R3,R3,#+8
   \   00000056   0x409A             LSLS     R2,R2,R3
   \   00000058   0x4311             ORRS     R1,R2,R1
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable6_8
   \   0000005E   0x6011             STR      R1,[R2, #+0]
     97                //Prepare the read/write pointer
     98                img_buffer=(void*)(buffer_ptr[processing_frame_indicator]);
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable6_7
   \   00000068   0x7812             LDRB     R2,[R2, #+0]
   \   0000006A   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable6_10
   \   00000072   0x6011             STR      R1,[R2, #+0]
     99              }
    100          
    101               //for(int i=0;i<50000;i++);
    102            }
   \                     ??Cam_Algorithm_3: (+1)
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \                     ??Cam_Algorithm_0: (+1)
   \   00000076   0x2832             CMP      R0,#+50
   \   00000078   0xD3C5             BCC.N    ??Cam_Algorithm_1
    103            //HERE WE SUCESSFULLY LOADED ONE FRAME:
    104            //Due to locking this will always be a consistent frame:
    105            //Post Frame Processing
    106            LED1_Tog();
   \   0000007A   0x.... 0x....      BL       LED1_Tog
    107            CLEAR_LOCK(PLOCK_BASE); //Release the processing lock
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF430 0x6070      BICS     R0,R0,#0xF00
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    108            process_diff=processing_frame - last_processed_frame;
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable6_11
   \   00000098   0x6809             LDR      R1,[R1, #+0]
   \   0000009A   0x1A40             SUBS     R0,R0,R1
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable6_12
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    109            last_processed_frame=processing_frame;
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable6_11
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    110          
    111          }
   \   000000AE   0xBD01             POP      {R0,PC}          ;; return
    112          
    113          // ====== Basic Drivers ======
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void PORTC_IRQHandler(){
    116            if((PORTC->ISFR)&PORT_ISFR_ISF(1 << 8)){  //CS
   \                     PORTC_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_13  ;; 0x4004b0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD559             BPL.N    ??PORTC_IRQHandler_0
    117              PORTC->ISFR |= PORT_ISFR_ISF(1 << 8);
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable6_13  ;; 0x4004b0a0
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable6_13  ;; 0x4004b0a0
   \   00000018   0x6008             STR      R0,[R1, #+0]
    118              
    119              if(img_row < IMG_ROWS && cam_row % IMG_STEP == 0 ){
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2832             CMP      R0,#+50
   \   00000022   0xDA44             BGE.N    ??PORTC_IRQHandler_1
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable6_14
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2104             MOVS     R1,#+4
   \   0000002C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000030   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000034   0x2A00             CMP      R2,#+0
   \   00000036   0xD13A             BNE.N    ??PORTC_IRQHandler_1
    120                ITM_EVENT8_WITH_PC(2,24);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable6_15  ;; 0xe000edfc
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x01C0             LSLS     R0,R0,#+7
   \   00000040   0xD511             BPL.N    ??PORTC_IRQHandler_2
   \                     ??PORTC_IRQHandler_3: (+1)
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0xe0000014
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD0FA             BEQ.N    ??PORTC_IRQHandler_3
   \   0000004C   0x4678             MOV      R0,PC
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable6_16  ;; 0xe0000014
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \                     ??PORTC_IRQHandler_4: (+1)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable6_17  ;; 0xe0000008
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD0FA             BEQ.N    ??PORTC_IRQHandler_4
   \   0000005E   0x2018             MOVS     R0,#+24
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable6_17  ;; 0xe0000008
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    121                DMA0->TCD[0].DADDR = (u32)&loading_buffer[img_row][0];
   \                     ??PORTC_IRQHandler_2: (+1)
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable6_18
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   00000070   0x7809             LDRB     R1,[R1, #+0]
   \   00000072   0x2262             MOVS     R2,#+98
   \   00000074   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable6_19  ;; 0x40009010
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    122                DMA0->ERQ |= DMA_ERQ_ERQ0_MASK; //Enable DMA0
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6_20  ;; 0x4000800c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable6_20  ;; 0x4000800c
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    123                ADC0->SC1[0] |= ADC_SC1_ADCH(4); //Restart ADC
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable6_21  ;; 0x4003b000
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable6_21  ;; 0x4003b000
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    124                DMA0->TCD[0].CSR |= DMA_CSR_START_MASK; //Start
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable6_22  ;; 0x4000901c
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable6_22  ;; 0x4000901c
   \   000000AC   0x8008             STRH     R0,[R1, #+0]
    125              }
    126              cam_row++;
   \                     ??PORTC_IRQHandler_1: (+1)
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable6_14
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable6_14
   \   000000BA   0x7008             STRB     R0,[R1, #+0]
   \   000000BC   0xE0A0             B.N      ??PORTC_IRQHandler_5
    127            }
    128            else if(PORTC->ISFR&PORT_ISFR_ISF(1 << 9)){   //VS
   \                     ??PORTC_IRQHandler_0: (+1)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable6_13  ;; 0x4004b0a0
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x0580             LSLS     R0,R0,#+22
   \   000000C6   0xF140 0x809B      BPL.W    ??PORTC_IRQHandler_5
    129              ITM_EVENT8_WITH_PC(3,24);
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable6_15  ;; 0xe000edfc
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x01C0             LSLS     R0,R0,#+7
   \   000000D2   0xD511             BPL.N    ??PORTC_IRQHandler_6
   \                     ??PORTC_IRQHandler_7: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0xe0000014
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD0FA             BEQ.N    ??PORTC_IRQHandler_7
   \   000000DE   0x4678             MOV      R0,PC
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable6_16  ;; 0xe0000014
   \   000000E4   0x6008             STR      R0,[R1, #+0]
   \                     ??PORTC_IRQHandler_8: (+1)
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable6_23  ;; 0xe000000c
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD0FA             BEQ.N    ??PORTC_IRQHandler_8
   \   000000F0   0x2018             MOVS     R0,#+24
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable6_23  ;; 0xe000000c
   \   000000F6   0x7008             STRB     R0,[R1, #+0]
    130              PORTC->ISFR |= PORT_ISFR_ISF(1 << 9);
   \                     ??PORTC_IRQHandler_6: (+1)
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable6_13  ;; 0x4004b0a0
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable6_13  ;; 0x4004b0a0
   \   00000106   0x6008             STR      R0,[R1, #+0]
    131              e_debug_num= cam_row;
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable6_14
   \   0000010C   0x7800             LDRB     R0,[R0, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable6_24
   \   00000112   0x8008             STRH     R0,[R1, #+0]
    132              cam_row = img_row = 0;
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000011A   0x7008             STRB     R0,[R1, #+0]
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000120   0x7800             LDRB     R0,[R0, #+0]
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable6_14
   \   00000126   0x7008             STRB     R0,[R1, #+0]
    133          
    134              //update the loading frame counter
    135              loading_frame++;
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0x1C40             ADDS     R0,R0,#+1
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000134   0x6008             STR      R0,[R1, #+0]
    136              //set current buffer==>last frame buffer
    137              last_frame_indicator=current_frame_indicator;
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000013A   0x7800             LDRB     R0,[R0, #+0]
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable6_25
   \   00000140   0x7008             STRB     R0,[R1, #+0]
    138              CLEAR_LOCK(LFLOCK_BASE);
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000146   0x6800             LDR      R0,[R0, #+0]
   \   00000148   0x0900             LSRS     R0,R0,#+4
   \   0000014A   0x0100             LSLS     R0,R0,#+4
   \   0000014C   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000150   0x6008             STR      R0,[R1, #+0]
    139              SET_LOCK(LFLOCK_BASE,last_frame_indicator);
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000156   0x6800             LDR      R0,[R0, #+0]
   \   00000158   0x2101             MOVS     R1,#+1
   \   0000015A   0x.... 0x....      LDR.W    R2,??DataTable6_25
   \   0000015E   0xF992 0x2000      LDRSB    R2,[R2, #+0]
   \   00000162   0x4091             LSLS     R1,R1,R2
   \   00000164   0x4308             ORRS     R0,R1,R0
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   0000016A   0x6008             STR      R0,[R1, #+0]
    140              current_frame_indicator=GET_FREE_LOCK();
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0xF240 0x1111      MOVW     R1,#+273
   \   00000176   0x4208             TST      R0,R1
   \   00000178   0xD016             BEQ.N    ??PORTC_IRQHandler_9
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0xF240 0x2122      MOVW     R1,#+546
   \   00000184   0x4208             TST      R0,R1
   \   00000186   0xD00A             BEQ.N    ??PORTC_IRQHandler_10
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF240 0x4144      MOVW     R1,#+1092
   \   00000192   0x4208             TST      R0,R1
   \   00000194   0xD001             BEQ.N    ??PORTC_IRQHandler_11
   \   00000196   0x2003             MOVS     R0,#+3
   \   00000198   0xE002             B.N      ??PORTC_IRQHandler_12
   \                     ??PORTC_IRQHandler_11: (+1)
   \   0000019A   0x2002             MOVS     R0,#+2
   \   0000019C   0xE000             B.N      ??PORTC_IRQHandler_12
   \                     ??PORTC_IRQHandler_10: (+1)
   \   0000019E   0x2001             MOVS     R0,#+1
   \                     ??PORTC_IRQHandler_12: (+1)
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   000001A4   0x7008             STRB     R0,[R1, #+0]
   \   000001A6   0xE003             B.N      ??PORTC_IRQHandler_13
   \                     ??PORTC_IRQHandler_9: (+1)
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   000001AE   0x7008             STRB     R0,[R1, #+0]
    141              loading_buffer=(void*)buffer_ptr[current_frame_indicator];
   \                     ??PORTC_IRQHandler_13: (+1)
   \   000001B0   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000001B4   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   000001B8   0x7809             LDRB     R1,[R1, #+0]
   \   000001BA   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable6_18
   \   000001C2   0x6008             STR      R0,[R1, #+0]
    142              static u32 t=0;
    143              debug_num=-PIT2_VAL() /(g_bus_clock/10000)+t;
   \   000001C4   0x.... 0x....      LDR.W    R0,??DataTable6_26
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xF242 0x7110      MOVW     R1,#+10000
   \   000001CE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable6_27  ;; 0x40037124
   \   000001D6   0x6809             LDR      R1,[R1, #+0]
   \   000001D8   0x4249             RSBS     R1,R1,#+0
   \   000001DA   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000001DE   0x.... 0x....      LDR.W    R1,??DataTable6_28
   \   000001E2   0x6809             LDR      R1,[R1, #+0]
   \   000001E4   0x1808             ADDS     R0,R1,R0
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable6_29
   \   000001EA   0x8008             STRH     R0,[R1, #+0]
    144              t-=debug_num;
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable6_28
   \   000001F0   0x6800             LDR      R0,[R0, #+0]
   \   000001F2   0x.... 0x....      LDR.W    R1,??DataTable6_29
   \   000001F6   0x8809             LDRH     R1,[R1, #+0]
   \   000001F8   0x1A40             SUBS     R0,R0,R1
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable6_28
   \   000001FE   0x6008             STR      R0,[R1, #+0]
    145            }
    146          }
   \                     ??PORTC_IRQHandler_5: (+1)
   \   00000200   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??t:
   \   00000000                      DS8 4
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void DMA0_IRQHandler(){
    149            //if(e_debug_num==1)
    150            //{e_debug_num=2;
    151            DMA0->CINT &= ~DMA_CINT_CINT(7);
   \                     DMA0_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_30  ;; 0x4000801f
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable6_30  ;; 0x4000801f
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    152            ITM_EVENT8_WITH_PC(1,25);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable6_15  ;; 0xe000edfc
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x01C0             LSLS     R0,R0,#+7
   \   00000018   0xD511             BPL.N    ??DMA0_IRQHandler_0
   \                     ??DMA0_IRQHandler_1: (+1)
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0xe0000014
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD0FA             BEQ.N    ??DMA0_IRQHandler_1
   \   00000024   0x4678             MOV      R0,PC
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable6_16  ;; 0xe0000014
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \                     ??DMA0_IRQHandler_2: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable6_31  ;; 0xe0000004
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD0FA             BEQ.N    ??DMA0_IRQHandler_2
   \   00000036   0x2019             MOVS     R0,#+25
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable6_31  ;; 0xe0000004
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    153            img_row++; 
   \                     ??DMA0_IRQHandler_0: (+1)
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    154            
    155            
    156            //}
    157          }
   \   0000004C   0x4770             BX       LR               ;; return
    158          
    159          
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void Cam_Init(){
   \                     Cam_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    162            
    163            // --- IO ---
    164            
    165            PORTC->PCR[8] |= PORT_PCR_MUX(1); //cs
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable6_32  ;; 0x4004b020
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable6_32  ;; 0x4004b020
   \   00000010   0x6008             STR      R0,[R1, #+0]
    166            PORTC->PCR[9] |= PORT_PCR_MUX(1); //vs
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable6_33  ;; 0x4004b024
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable6_33  ;; 0x4004b024
   \   00000020   0x6008             STR      R0,[R1, #+0]
    167            PORTC->PCR[11] |= PORT_PCR_MUX(1);    //oe
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable6_34  ;; 0x4004b02c
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable6_34  ;; 0x4004b02c
   \   00000030   0x6008             STR      R0,[R1, #+0]
    168            PTC->PDDR &=~(3<<8);
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable6_35  ;; 0x400ff094
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF430 0x7040      BICS     R0,R0,#0x300
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable6_35  ;; 0x400ff094
   \   00000040   0x6008             STR      R0,[R1, #+0]
    169            PTC->PDDR &=~(1<<11);
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable6_35  ;; 0x400ff094
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF430 0x6000      BICS     R0,R0,#0x800
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable6_35  ;; 0x400ff094
   \   00000050   0x6008             STR      R0,[R1, #+0]
    170            PORTC->PCR[8] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK | PORT_PCR_IRQC(10);	//PULLUP | falling edge
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable6_32  ;; 0x4004b020
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF440 0x2020      ORR      R0,R0,#0xA0000
   \   0000005C   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable6_32  ;; 0x4004b020
   \   00000064   0x6008             STR      R0,[R1, #+0]
    171            PORTC->PCR[9] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK | PORT_PCR_IRQC(9);  // rising edge
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable6_33  ;; 0x4004b024
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0xF440 0x2010      ORR      R0,R0,#0x90000
   \   00000070   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable6_33  ;; 0x4004b024
   \   00000078   0x6008             STR      R0,[R1, #+0]
    172            PORTC->PCR[11] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK ;
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable6_34  ;; 0x4004b02c
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable6_34  ;; 0x4004b02c
   \   00000088   0x6008             STR      R0,[R1, #+0]
    173            
    174            NVIC_EnableIRQ(PORTC_IRQn);
   \   0000008A   0x2059             MOVS     R0,#+89
   \   0000008C   0x.... 0x....      BL       NVIC_EnableIRQ
    175            NVIC_SetPriority(PORTC_IRQn, NVIC_EncodePriority(NVIC_GROUP, 1, 2));
   \   00000090   0x2202             MOVS     R2,#+2
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x2005             MOVS     R0,#+5
   \   00000096   0x.... 0x....      BL       NVIC_EncodePriority
   \   0000009A   0x0001             MOVS     R1,R0
   \   0000009C   0x2059             MOVS     R0,#+89
   \   0000009E   0x.... 0x....      BL       NVIC_SetPriority
    176            
    177            // --- AD ---
    178            
    179            /*
    180            SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;  //ADC1 Clock Enable
    181            ADC0->CFG1 |= 0
    182                       //|ADC_CFG1_ADLPC_MASK
    183                       | ADC_CFG1_ADICLK(1)
    184                       | ADC_CFG1_MODE(0);     // 8 bits
    185                       //| ADC_CFG1_ADIV(0);
    186            ADC0->CFG2 |= //ADC_CFG2_ADHSC_MASK |
    187                          ADC_CFG2_MUXSEL_MASK |  // b
    188                          ADC_CFG2_ADACKEN_MASK; 
    189            
    190            ADC0->SC1[0]&=~ADC_SC1_AIEN_MASK;//disenble interrupt
    191            
    192            ADC0->SC2 |= ADC_SC2_DMAEN_MASK; //DMA
    193            
    194            ADC0->SC3 |= ADC_SC3_ADCO_MASK; // continuous
    195            
    196            //PORTC->PCR[2]|=PORT_PCR_MUX(0);//adc1-4a
    197            
    198            ADC0->SC1[0] |= ADC_SC1_ADCH(4);
    199            */
    200            
    201            SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; //ADC1 Clock Enable
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable6_36  ;; 0x4004803c
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable6_36  ;; 0x4004803c
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    202            ADC0->SC1[0] &= ~ADC_SC1_AIEN_MASK; //ADC1A
   \   000000B2   0x....             LDR.N    R0,??DataTable6_21  ;; 0x4003b000
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF030 0x0040      BICS     R0,R0,#0x40
   \   000000BA   0x....             LDR.N    R1,??DataTable6_21  ;; 0x4003b000
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    203            ADC0->SC1[0] = 0x00000000; //Clear
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x....             LDR.N    R1,??DataTable6_21  ;; 0x4003b000
   \   000000C2   0x6008             STR      R0,[R1, #+0]
    204            ADC0->SC1[0] |= ADC_SC1_ADCH(4); //ADC1_5->Input, Single Pin, No interrupt
   \   000000C4   0x....             LDR.N    R0,??DataTable6_21  ;; 0x4003b000
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000CC   0x....             LDR.N    R1,??DataTable6_21  ;; 0x4003b000
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    205            ADC0->SC1[1] &= ~ADC_SC1_AIEN_MASK; //ADC1B
   \   000000D0   0x....             LDR.N    R0,??DataTable6_37  ;; 0x4003b004
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF030 0x0040      BICS     R0,R0,#0x40
   \   000000D8   0x....             LDR.N    R1,??DataTable6_37  ;; 0x4003b004
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    206            ADC0->SC1[1] |= ADC_SC1_ADCH(4); //ADC1_5b
   \   000000DC   0x....             LDR.N    R0,??DataTable6_37  ;; 0x4003b004
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000E4   0x....             LDR.N    R1,??DataTable6_37  ;; 0x4003b004
   \   000000E6   0x6008             STR      R0,[R1, #+0]
    207            ADC0->SC2 &= 0x00000000; //Clear all.
   \   000000E8   0x....             LDR.N    R0,??DataTable6_38  ;; 0x4003b020
   \   000000EA   0x6804             LDR      R4,[R0, #+0]
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x....             LDR.N    R1,??DataTable6_38  ;; 0x4003b020
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    208            ADC0->SC2 |= ADC_SC2_DMAEN_MASK; //DMA, SoftWare
   \   000000F2   0x....             LDR.N    R0,??DataTable6_38  ;; 0x4003b020
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000FA   0x....             LDR.N    R1,??DataTable6_38  ;; 0x4003b020
   \   000000FC   0x6008             STR      R0,[R1, #+0]
    209            ADC0->SC3 &= (~ADC_SC3_AVGE_MASK&~ADC_SC3_AVGS_MASK); //hardware average disabled
   \   000000FE   0x....             LDR.N    R0,??DataTable6_39  ;; 0x4003b024
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x08C0             LSRS     R0,R0,#+3
   \   00000104   0x00C0             LSLS     R0,R0,#+3
   \   00000106   0x....             LDR.N    R1,??DataTable6_39  ;; 0x4003b024
   \   00000108   0x6008             STR      R0,[R1, #+0]
    210            ADC0->SC3 |= ADC_SC3_ADCO_MASK; //Continuous conversion enable
   \   0000010A   0x....             LDR.N    R0,??DataTable6_39  ;; 0x4003b024
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000112   0x....             LDR.N    R1,??DataTable6_39  ;; 0x4003b024
   \   00000114   0x6008             STR      R0,[R1, #+0]
    211            ADC0->CFG1|=ADC_CFG1_ADICLK(1)|ADC_CFG1_MODE(0)|ADC_CFG1_ADIV(0);//InputClk, ShortTime, 8bits, Bus
   \   00000116   0x....             LDR.N    R0,??DataTable6_40  ;; 0x4003b008
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000011E   0x....             LDR.N    R1,??DataTable6_40  ;; 0x4003b008
   \   00000120   0x6008             STR      R0,[R1, #+0]
    212            ADC0->CFG2 |= ADC_CFG2_MUXSEL_MASK; //ADC1  b
   \   00000122   0x....             LDR.N    R0,??DataTable6_41  ;; 0x4003b00c
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000012A   0x....             LDR.N    R1,??DataTable6_41  ;; 0x4003b00c
   \   0000012C   0x6008             STR      R0,[R1, #+0]
    213            ADC0->CFG2 |= ADC_CFG2_ADACKEN_MASK; //OutputClock
   \   0000012E   0x....             LDR.N    R0,??DataTable6_41  ;; 0x4003b00c
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000136   0x....             LDR.N    R1,??DataTable6_41  ;; 0x4003b00c
   \   00000138   0x6008             STR      R0,[R1, #+0]
    214              
    215            // --- DMA ---
    216            
    217            SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK; //DMAMUX Clock Enable
   \   0000013A   0x....             LDR.N    R0,??DataTable6_36  ;; 0x4004803c
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000142   0x....             LDR.N    R1,??DataTable6_36  ;; 0x4004803c
   \   00000144   0x6008             STR      R0,[R1, #+0]
    218            SIM->SCGC7 |= SIM_SCGC7_DMA_MASK; //DMA Clock Enable
   \   00000146   0x....             LDR.N    R0,??DataTable6_42  ;; 0x40048040
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000014E   0x....             LDR.N    R1,??DataTable6_42  ;; 0x40048040
   \   00000150   0x6008             STR      R0,[R1, #+0]
    219            DMAMUX->CHCFG[0] |= DMAMUX_CHCFG_SOURCE(40); //DMA0->No.40 request, ADC0
   \   00000152   0x....             LDR.N    R0,??DataTable6_43  ;; 0x40021000
   \   00000154   0x7800             LDRB     R0,[R0, #+0]
   \   00000156   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   0000015A   0x....             LDR.N    R1,??DataTable6_43  ;; 0x40021000
   \   0000015C   0x7008             STRB     R0,[R1, #+0]
    220            DMA0->TCD[0].SADDR = (uint32_t) & (ADC0->R[0]); //Source Address 0x400B_B010h
   \   0000015E   0x....             LDR.N    R0,??DataTable6_44  ;; 0x4003b010
   \   00000160   0x....             LDR.N    R1,??DataTable6_45  ;; 0x40009000
   \   00000162   0x6008             STR      R0,[R1, #+0]
    221            DMA0->TCD[0].SOFF = 0; //Source Fixed
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x....             LDR.N    R1,??DataTable6_46  ;; 0x40009004
   \   00000168   0x8008             STRH     R0,[R1, #+0]
    222            DMA0->TCD[0].ATTR = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0); //Source 8 bits, Aim 8 bits
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x....             LDR.N    R1,??DataTable6_47  ;; 0x40009006
   \   0000016E   0x8008             STRH     R0,[R1, #+0]
    223            DMA0->TCD[0].NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(1); //one byte each
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0x....             LDR.N    R1,??DataTable6_48  ;; 0x40009008
   \   00000174   0x6008             STR      R0,[R1, #+0]
    224            DMA0->TCD[0].SLAST = 0; //Last Source fixed
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0x....             LDR.N    R1,??DataTable6_49  ;; 0x4000900c
   \   0000017A   0x6008             STR      R0,[R1, #+0]
    225            DMA0->TCD[0].DADDR = (u32)loading_buffer;
   \   0000017C   0x....             LDR.N    R0,??DataTable6_18
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0x....             LDR.N    R1,??DataTable6_19  ;; 0x40009010
   \   00000182   0x6008             STR      R0,[R1, #+0]
    226            DMA0->TCD[0].DOFF = 1;
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0x....             LDR.N    R1,??DataTable6_50  ;; 0x40009014
   \   00000188   0x8008             STRH     R0,[R1, #+0]
    227            DMA0->TCD[0].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(IMG_COLS);
   \   0000018A   0x2062             MOVS     R0,#+98
   \   0000018C   0x....             LDR.N    R1,??DataTable6_51  ;; 0x40009016
   \   0000018E   0x8008             STRH     R0,[R1, #+0]
    228            DMA0->TCD[0].DLAST_SGA = 0;
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x....             LDR.N    R1,??DataTable6_52  ;; 0x40009018
   \   00000194   0x6008             STR      R0,[R1, #+0]
    229            DMA0->TCD[0].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(IMG_COLS);
   \   00000196   0x2062             MOVS     R0,#+98
   \   00000198   0x....             LDR.N    R1,??DataTable6_53  ;; 0x4000901e
   \   0000019A   0x8008             STRH     R0,[R1, #+0]
    230            DMA0->TCD[0].CSR = 0x00000000; //Clear
   \   0000019C   0x2000             MOVS     R0,#+0
   \   0000019E   0x....             LDR.N    R1,??DataTable6_22  ;; 0x4000901c
   \   000001A0   0x8008             STRH     R0,[R1, #+0]
    231            DMA0->TCD[0].CSR |= DMA_CSR_DREQ_MASK; //Auto Clear
   \   000001A2   0x....             LDR.N    R0,??DataTable6_22  ;; 0x4000901c
   \   000001A4   0x8800             LDRH     R0,[R0, #+0]
   \   000001A6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000001AA   0x....             LDR.N    R1,??DataTable6_22  ;; 0x4000901c
   \   000001AC   0x8008             STRH     R0,[R1, #+0]
    232            DMA0->TCD[0].CSR |= DMA_CSR_INTMAJOR_MASK; //Enable Major Loop Int
   \   000001AE   0x....             LDR.N    R0,??DataTable6_22  ;; 0x4000901c
   \   000001B0   0x8800             LDRH     R0,[R0, #+0]
   \   000001B2   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000001B6   0x....             LDR.N    R1,??DataTable6_22  ;; 0x4000901c
   \   000001B8   0x8008             STRH     R0,[R1, #+0]
    233            DMA0->DCHPRI0 = DMA_DCHPRI1_CHPRI(1);
   \   000001BA   0x2001             MOVS     R0,#+1
   \   000001BC   0x....             LDR.N    R1,??DataTable6_54  ;; 0x40008103
   \   000001BE   0x7008             STRB     R0,[R1, #+0]
    234            DMA0->DCHPRI1 = DMA_DCHPRI1_CHPRI(0); //Exchange the DMA Priority of CH0 and CH1
   \   000001C0   0x2000             MOVS     R0,#+0
   \   000001C2   0x....             LDR.N    R1,??DataTable6_55  ;; 0x40008102
   \   000001C4   0x7008             STRB     R0,[R1, #+0]
    235            DMA0->INT |= DMA_INT_INT0_MASK; //Open Interrupt
   \   000001C6   0x....             LDR.N    R0,??DataTable6_56  ;; 0x40008024
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001CE   0x....             LDR.N    R1,??DataTable6_56  ;; 0x40008024
   \   000001D0   0x6008             STR      R0,[R1, #+0]
    236            //DMA->ERQ&=~DMA_ERQ_ERQ0_MASK;//Clear Disable
    237            DMAMUX->CHCFG[0] |= DMAMUX_CHCFG_ENBL_MASK; //Enable
   \   000001D2   0x....             LDR.N    R0,??DataTable6_43  ;; 0x40021000
   \   000001D4   0x7800             LDRB     R0,[R0, #+0]
   \   000001D6   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001DA   0x....             LDR.N    R1,??DataTable6_43  ;; 0x40021000
   \   000001DC   0x7008             STRB     R0,[R1, #+0]
    238            
    239            NVIC_EnableIRQ(DMA0_IRQn);
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x.... 0x....      BL       NVIC_EnableIRQ
    240            NVIC_SetPriority(DMA0_IRQn, NVIC_EncodePriority(NVIC_GROUP, 1, 2));
   \   000001E4   0x2202             MOVS     R2,#+2
   \   000001E6   0x2101             MOVS     R1,#+1
   \   000001E8   0x2005             MOVS     R0,#+5
   \   000001EA   0x.... 0x....      BL       NVIC_EncodePriority
   \   000001EE   0x0001             MOVS     R1,R0
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x.... 0x....      BL       NVIC_SetPriority
    241            
    242          #define BUFFER(n) cam_buffer##n
    243          #define INIT_BUFFER(n) \
    244            for(int i=1;i<sizeof(BUFFER(n));i++) BUFFER(n)[i]=0;\
    245            BUFFER(n)[0]=0xff; BUFFER(n)[1]=0x00; BUFFER(n)[2]=0xff; \
    246            BUFFER(n)[sizeof(BUFFER(n))-1]=0xA0; \
    247            BUFFER(n)[sizeof(BUFFER(n))-2]=0x00; \
    248            BUFFER(n)[sizeof(BUFFER(n))-3]=0xA0; 
    249            
    250            INIT_BUFFER(0);
   \   000001F6   0x2001             MOVS     R0,#+1
   \   000001F8   0xE003             B.N      ??Cam_Init_0
   \                     ??Cam_Init_1: (+1)
   \   000001FA   0x2100             MOVS     R1,#+0
   \   000001FC   0x....             LDR.N    R2,??DataTable6_57
   \   000001FE   0x5481             STRB     R1,[R0, R2]
   \   00000200   0x1C40             ADDS     R0,R0,#+1
   \                     ??Cam_Init_0: (+1)
   \   00000202   0xF241 0x312A      MOVW     R1,#+4906
   \   00000206   0x4288             CMP      R0,R1
   \   00000208   0xD3F7             BCC.N    ??Cam_Init_1
   \   0000020A   0x20FF             MOVS     R0,#+255
   \   0000020C   0x....             LDR.N    R1,??DataTable6_57
   \   0000020E   0x7008             STRB     R0,[R1, #+0]
   \   00000210   0x2000             MOVS     R0,#+0
   \   00000212   0x....             LDR.N    R1,??DataTable6_57
   \   00000214   0x7048             STRB     R0,[R1, #+1]
   \   00000216   0x20FF             MOVS     R0,#+255
   \   00000218   0x....             LDR.N    R1,??DataTable6_57
   \   0000021A   0x7088             STRB     R0,[R1, #+2]
   \   0000021C   0x20A0             MOVS     R0,#+160
   \   0000021E   0x....             LDR.N    R1,??DataTable6_58
   \   00000220   0x7008             STRB     R0,[R1, #+0]
   \   00000222   0x2000             MOVS     R0,#+0
   \   00000224   0x....             LDR.N    R1,??DataTable6_59
   \   00000226   0x7008             STRB     R0,[R1, #+0]
   \   00000228   0x20A0             MOVS     R0,#+160
   \   0000022A   0x....             LDR.N    R1,??DataTable6_60
   \   0000022C   0x7008             STRB     R0,[R1, #+0]
    251            INIT_BUFFER(1);
   \   0000022E   0x2001             MOVS     R0,#+1
   \   00000230   0xE003             B.N      ??Cam_Init_2
   \                     ??Cam_Init_3: (+1)
   \   00000232   0x2100             MOVS     R1,#+0
   \   00000234   0x....             LDR.N    R2,??DataTable6_61
   \   00000236   0x5481             STRB     R1,[R0, R2]
   \   00000238   0x1C40             ADDS     R0,R0,#+1
   \                     ??Cam_Init_2: (+1)
   \   0000023A   0xF241 0x312A      MOVW     R1,#+4906
   \   0000023E   0x4288             CMP      R0,R1
   \   00000240   0xD3F7             BCC.N    ??Cam_Init_3
   \   00000242   0x20FF             MOVS     R0,#+255
   \   00000244   0x....             LDR.N    R1,??DataTable6_61
   \   00000246   0x7008             STRB     R0,[R1, #+0]
   \   00000248   0x2000             MOVS     R0,#+0
   \   0000024A   0x....             LDR.N    R1,??DataTable6_61
   \   0000024C   0x7048             STRB     R0,[R1, #+1]
   \   0000024E   0x20FF             MOVS     R0,#+255
   \   00000250   0x....             LDR.N    R1,??DataTable6_61
   \   00000252   0x7088             STRB     R0,[R1, #+2]
   \   00000254   0x20A0             MOVS     R0,#+160
   \   00000256   0x....             LDR.N    R1,??DataTable6_62
   \   00000258   0x7008             STRB     R0,[R1, #+0]
   \   0000025A   0x2000             MOVS     R0,#+0
   \   0000025C   0x....             LDR.N    R1,??DataTable6_63
   \   0000025E   0x7008             STRB     R0,[R1, #+0]
   \   00000260   0x20A0             MOVS     R0,#+160
   \   00000262   0x....             LDR.N    R1,??DataTable6_64
   \   00000264   0x7008             STRB     R0,[R1, #+0]
    252            INIT_BUFFER(2);
   \   00000266   0x2001             MOVS     R0,#+1
   \   00000268   0xE003             B.N      ??Cam_Init_4
   \                     ??Cam_Init_5: (+1)
   \   0000026A   0x2100             MOVS     R1,#+0
   \   0000026C   0x....             LDR.N    R2,??DataTable6_65
   \   0000026E   0x5481             STRB     R1,[R0, R2]
   \   00000270   0x1C40             ADDS     R0,R0,#+1
   \                     ??Cam_Init_4: (+1)
   \   00000272   0xF241 0x312A      MOVW     R1,#+4906
   \   00000276   0x4288             CMP      R0,R1
   \   00000278   0xD3F7             BCC.N    ??Cam_Init_5
   \   0000027A   0x20FF             MOVS     R0,#+255
   \   0000027C   0x....             LDR.N    R1,??DataTable6_65
   \   0000027E   0x7008             STRB     R0,[R1, #+0]
   \   00000280   0x2000             MOVS     R0,#+0
   \   00000282   0x....             LDR.N    R1,??DataTable6_65
   \   00000284   0x7048             STRB     R0,[R1, #+1]
   \   00000286   0x20FF             MOVS     R0,#+255
   \   00000288   0x....             LDR.N    R1,??DataTable6_65
   \   0000028A   0x7088             STRB     R0,[R1, #+2]
   \   0000028C   0x20A0             MOVS     R0,#+160
   \   0000028E   0x....             LDR.N    R1,??DataTable6_66
   \   00000290   0x7008             STRB     R0,[R1, #+0]
   \   00000292   0x2000             MOVS     R0,#+0
   \   00000294   0x....             LDR.N    R1,??DataTable6_67
   \   00000296   0x7008             STRB     R0,[R1, #+0]
   \   00000298   0x20A0             MOVS     R0,#+160
   \   0000029A   0x....             LDR.N    R1,??DataTable6_68
   \   0000029C   0x7008             STRB     R0,[R1, #+0]
    253            INIT_BUFFER(3);
   \   0000029E   0x2001             MOVS     R0,#+1
   \   000002A0   0xE003             B.N      ??Cam_Init_6
   \                     ??Cam_Init_7: (+1)
   \   000002A2   0x2100             MOVS     R1,#+0
   \   000002A4   0x....             LDR.N    R2,??DataTable6_69
   \   000002A6   0x5481             STRB     R1,[R0, R2]
   \   000002A8   0x1C40             ADDS     R0,R0,#+1
   \                     ??Cam_Init_6: (+1)
   \   000002AA   0xF241 0x312A      MOVW     R1,#+4906
   \   000002AE   0x4288             CMP      R0,R1
   \   000002B0   0xD3F7             BCC.N    ??Cam_Init_7
   \   000002B2   0x20FF             MOVS     R0,#+255
   \   000002B4   0x....             LDR.N    R1,??DataTable6_69
   \   000002B6   0x7008             STRB     R0,[R1, #+0]
   \   000002B8   0x2000             MOVS     R0,#+0
   \   000002BA   0x....             LDR.N    R1,??DataTable6_69
   \   000002BC   0x7048             STRB     R0,[R1, #+1]
   \   000002BE   0x20FF             MOVS     R0,#+255
   \   000002C0   0x....             LDR.N    R1,??DataTable6_69
   \   000002C2   0x7088             STRB     R0,[R1, #+2]
   \   000002C4   0x20A0             MOVS     R0,#+160
   \   000002C6   0x....             LDR.N    R1,??DataTable6_70
   \   000002C8   0x7008             STRB     R0,[R1, #+0]
   \   000002CA   0x2000             MOVS     R0,#+0
   \   000002CC   0x....             LDR.N    R1,??DataTable6_71
   \   000002CE   0x7008             STRB     R0,[R1, #+0]
   \   000002D0   0x20A0             MOVS     R0,#+160
   \   000002D2   0x....             LDR.N    R1,??DataTable6_72
   \   000002D4   0x7008             STRB     R0,[R1, #+0]
    254          
    255          #undef BUFFER
    256          #undef INIT_BUFFER
    257          }
   \   000002D6   0xBD10             POP      {R4,PC}          ;; return
    258          

   \                                 In section .text, align 2, keep-with-next
    259          void DMA1_IRQHandler(){
   \                     DMA1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    260            //One frame is sent!
    261            //TOCK();
    262            send_diff=sending_frame-last_sent_frame;
   \   00000002   0x....             LDR.N    R0,??DataTable6_73
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable6_74
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x....             LDR.N    R1,??DataTable6_75
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    263            last_sent_frame=sending_frame;
   \   00000010   0x....             LDR.N    R0,??DataTable6_73
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x....             LDR.N    R1,??DataTable6_74
   \   00000016   0x6008             STR      R0,[R1, #+0]
    264            sending_frame=loading_frame-1;
   \   00000018   0x....             LDR.N    R0,??DataTable6_5
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x1E40             SUBS     R0,R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable6_73
   \   00000020   0x6008             STR      R0,[R1, #+0]
    265            
    266            uint8 t=last_frame_indicator;//This Ensures atomic operation
   \   00000022   0x....             LDR.N    R0,??DataTable6_25
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
    267            CLEAR_LOCK(SLOCK_BASE);
   \   00000026   0x....             LDR.N    R1,??DataTable6_8
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0xF031 0x01F0      BICS     R1,R1,#0xF0
   \   0000002E   0x....             LDR.N    R2,??DataTable6_8
   \   00000030   0x6011             STR      R1,[R2, #+0]
    268            SET_LOCK(SLOCK_BASE, t);
   \   00000032   0x....             LDR.N    R1,??DataTable6_8
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x1D03             ADDS     R3,R0,#+4
   \   0000003A   0x409A             LSLS     R2,R2,R3
   \   0000003C   0x4311             ORRS     R1,R2,R1
   \   0000003E   0x....             LDR.N    R2,??DataTable6_8
   \   00000040   0x6011             STR      R1,[R2, #+0]
    269            sending_buffer=buffer_ptr[t]-SIG_SIZE;
   \   00000042   0x....             LDR.N    R1,??DataTable6_9
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000004A   0x1EC9             SUBS     R1,R1,#+3
   \   0000004C   0x....             LDR.N    R2,??DataTable6_76
   \   0000004E   0x6011             STR      R1,[R2, #+0]
    270            
    271            sending_frame_indicator=t;
   \   00000050   0x....             LDR.N    R1,??DataTable6_77
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    272            
    273            DMA0->INT=DMA_INT_INT1_MASK;
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x....             LDR.N    R1,??DataTable6_56  ;; 0x40008024
   \   00000058   0x6008             STR      R0,[R1, #+0]
    274            
    275            Bluetooth_SendDataChunkAsync( sending_buffer,
    276                                         IMG_ROWS * VALID_COLS + 2 * SIG_SIZE );
   \   0000005A   0xF241 0x312A      MOVW     R1,#+4906
   \   0000005E   0x....             LDR.N    R0,??DataTable6_76
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       Bluetooth_SendDataChunkAsync
    277            LED2_Tog();
   \   00000066   0x.... 0x....      BL       LED2_Tog
    278            //TICK();
    279          }
   \   0000006A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     img_row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     processing_frame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     loading_frame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     current_frame_indicator

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     processing_frame_indicator

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     LockState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     buffer_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     img_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     last_processed_frame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     process_diff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     cam_row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0xE000EDFC         DC32     0xe000edfc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0xE0000014         DC32     0xe0000014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0xE0000008         DC32     0xe0000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     loading_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x4000901C         DC32     0x4000901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0xE000000C         DC32     0xe000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     e_debug_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x........         DC32     last_frame_indicator

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x40037124         DC32     0x40037124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   0x........         DC32     ??t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   0x........         DC32     debug_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   0x4000801F         DC32     0x4000801f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_31:
   \   00000000   0xE0000004         DC32     0xe0000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_32:
   \   00000000   0x4004B020         DC32     0x4004b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_33:
   \   00000000   0x4004B024         DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_34:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_35:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_36:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_37:
   \   00000000   0x4003B004         DC32     0x4003b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_38:
   \   00000000   0x4003B020         DC32     0x4003b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_39:
   \   00000000   0x4003B024         DC32     0x4003b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_40:
   \   00000000   0x4003B008         DC32     0x4003b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_41:
   \   00000000   0x4003B00C         DC32     0x4003b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_42:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_43:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_44:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_45:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_46:
   \   00000000   0x40009004         DC32     0x40009004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_47:
   \   00000000   0x40009006         DC32     0x40009006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_48:
   \   00000000   0x40009008         DC32     0x40009008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_49:
   \   00000000   0x4000900C         DC32     0x4000900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_50:
   \   00000000   0x40009014         DC32     0x40009014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_51:
   \   00000000   0x40009016         DC32     0x40009016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_52:
   \   00000000   0x40009018         DC32     0x40009018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_53:
   \   00000000   0x4000901E         DC32     0x4000901e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_54:
   \   00000000   0x40008103         DC32     0x40008103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_55:
   \   00000000   0x40008102         DC32     0x40008102

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_56:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_57:
   \   00000000   0x........         DC32     cam_buffer0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_58:
   \   00000000   0x........         DC32     cam_buffer0+0x1329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_59:
   \   00000000   0x........         DC32     cam_buffer0+0x1328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_60:
   \   00000000   0x........         DC32     cam_buffer0+0x1327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_61:
   \   00000000   0x........         DC32     cam_buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_62:
   \   00000000   0x........         DC32     cam_buffer1+0x1329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_63:
   \   00000000   0x........         DC32     cam_buffer1+0x1328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_64:
   \   00000000   0x........         DC32     cam_buffer1+0x1327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_65:
   \   00000000   0x........         DC32     cam_buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_66:
   \   00000000   0x........         DC32     cam_buffer2+0x1329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_67:
   \   00000000   0x........         DC32     cam_buffer2+0x1328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_68:
   \   00000000   0x........         DC32     cam_buffer2+0x1327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_69:
   \   00000000   0x........         DC32     cam_buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_70:
   \   00000000   0x........         DC32     cam_buffer3+0x1329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_71:
   \   00000000   0x........         DC32     cam_buffer3+0x1328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_72:
   \   00000000   0x........         DC32     cam_buffer3+0x1327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_73:
   \   00000000   0x........         DC32     sending_frame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_74:
   \   00000000   0x........         DC32     last_sent_frame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_75:
   \   00000000   0x........         DC32     send_diff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_76:
   \   00000000   0x........         DC32     sending_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_77:
   \   00000000   0x........         DC32     sending_frame_indicator

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Cam_Algorithm
         8   -> LED1_Tog
       8   Cam_Init
         8   -> NVIC_EnableIRQ
         8   -> NVIC_EncodePriority
         8   -> NVIC_SetPriority
       0   DMA0_IRQHandler
       8   DMA1_IRQHandler
         8   -> Bluetooth_SendDataChunkAsync
         8   -> LED2_Tog
       0   NVIC_EnableIRQ
       4   NVIC_EncodePriority
       0   NVIC_SetPriority
       0   PORTC_IRQHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_34
       4  ??DataTable6_35
       4  ??DataTable6_36
       4  ??DataTable6_37
       4  ??DataTable6_38
       4  ??DataTable6_39
       4  ??DataTable6_4
       4  ??DataTable6_40
       4  ??DataTable6_41
       4  ??DataTable6_42
       4  ??DataTable6_43
       4  ??DataTable6_44
       4  ??DataTable6_45
       4  ??DataTable6_46
       4  ??DataTable6_47
       4  ??DataTable6_48
       4  ??DataTable6_49
       4  ??DataTable6_5
       4  ??DataTable6_50
       4  ??DataTable6_51
       4  ??DataTable6_52
       4  ??DataTable6_53
       4  ??DataTable6_54
       4  ??DataTable6_55
       4  ??DataTable6_56
       4  ??DataTable6_57
       4  ??DataTable6_58
       4  ??DataTable6_59
       4  ??DataTable6_6
       4  ??DataTable6_60
       4  ??DataTable6_61
       4  ??DataTable6_62
       4  ??DataTable6_63
       4  ??DataTable6_64
       4  ??DataTable6_65
       4  ??DataTable6_66
       4  ??DataTable6_67
       4  ??DataTable6_68
       4  ??DataTable6_69
       4  ??DataTable6_7
       4  ??DataTable6_70
       4  ??DataTable6_71
       4  ??DataTable6_72
       4  ??DataTable6_73
       4  ??DataTable6_74
       4  ??DataTable6_75
       4  ??DataTable6_76
       4  ??DataTable6_77
       4  ??DataTable6_8
       4  ??DataTable6_9
     176  Cam_Algorithm
     728  Cam_Init
      78  DMA0_IRQHandler
     108  DMA1_IRQHandler
       4  LockState
      22  NVIC_EnableIRQ
      62  NVIC_EncodePriority
      38  NVIC_SetPriority
     514  PORTC_IRQHandler
      16  buffer_ptr
    4908  cam_buffer0
    4908  cam_buffer1
    4908  cam_buffer2
    4908  cam_buffer3
       1  cam_row
       1  current_frame_indicator
       4  img_buffer
       1  img_row
       1  last_frame_indicator
       4  last_processed_frame
       4  last_sent_frame
       4  load_diff
       4  loading_buffer
       4  loading_frame
       4  process_diff
       4  processing_frame
       1  processing_frame_indicator
       4  send_diff
       4  sending_buffer
       4  sending_frame
       1  sending_frame_indicator
       4  t

 
 19 673 bytes in section .bss
     33 bytes in section .data
  2 038 bytes in section .text
 
  2 038 bytes of CODE memory
 19 706 bytes of DATA memory

Errors: none
Warnings: none
