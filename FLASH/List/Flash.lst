###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        21/Feb/2016  03:11:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\freescale_racing\SmartCar_K60_TeamBLANK\source\Flash.c
#    Command line =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\source\Flash.c -lCN
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\ -lB
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\ -o
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --char_is_signed --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\source\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\common\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\HW\ -I
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\LPLD\DEV\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\List\Flash.lst
#    Object file  =  
#        E:\freescale_racing\SmartCar_K60_TeamBLANK\FLASH\Obj\Flash.o
#
###############################################################################

E:\freescale_racing\SmartCar_K60_TeamBLANK\source\Flash.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2016/01/15
      4          License : MIT
      5          */
      6          #include "includes.h"
      7          
      8          
      9          // ===== Global Variables =====
     10          

   \                                 In section .bss, align 4
     11          U16 data[DATA_NUM];
   \                     `data`:
   \   00000000                      DS8 32
     12          

   \                                 In section .data, align 4
     13          U16 data_initial[DATA_NUM]={
   \                     data_initial:
   \   00000000   0x0001 0x0000      DC16 1, 0, 0, 40, 100, 85, 95, 1635, 40, 10, 75, 70, 1, 1, 0, 15
   \              0x0000 0x0028
   \              0x0064 0x0055
   \              0x005F 0x0663
   \              0x0028 0x000A
   \              0x004B 0x0046
   \              0x0001 0x0001
   \              0x0000 0x000F
     14            1,	        //data flag
     15            0,	        //KF_switch
     16            0,	        //blance_deform
     17            40,	        //balance_K
     18            100,	        //balance P
     19            85,	        //balance D
     20            95,	        //balance dt
     21            1635,	        //acc offset
     22            40,            //P speed
     23            10,            //D speed
     24            75,           //pwm deadzone left
     25            70,           //pwm deadzone right
     26            1,            //wheel p
     27            1,            //wheel i
     28            0,            //wheel d
     29            15,           // I speed
     30          };
     31          
     32          
     33          
     34          
     35          // ======= APIs =======
     36          
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void Flash_Write(U16 sector){
   \                     Flash_Write: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     39            U32 addr = ADDR + sector*SECTOR_SIZE;
   \   00000004   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000008   0xF44F 0x7100      MOV      R1,#+512
   \   0000000C   0x4348             MULS     R0,R1,R0
   \   0000000E   0xF510 0x3070      ADDS     R0,R0,#+245760
   \   00000012   0x9000             STR      R0,[SP, #+0]
     40            __disable_irq();
   \   00000014   0xB672             CPSID    I
     41            Flash_Erase(sector);
   \   00000016   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000001A   0x.... 0x....      BL       Flash_Erase
     42            Flash_Program(sector,DATA_NUM,data);
   \   0000001E   0x....             LDR.N    R2,??DataTable6
   \   00000020   0x2110             MOVS     R1,#+16
   \   00000022   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000026   0x.... 0x....      BL       Flash_Program
     43            __enable_irq();
   \   0000002A   0xB662             CPSIE    I
     44          }
   \   0000002C   0xBD07             POP      {R0-R2,PC}       ;; return
     45          
     46          

   \                                 In section .text, align 2, keep-with-next
     47          U16 Flash_Read(U16 sector,U16 data_index){
   \                     Flash_Read: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
     48            U16* addr = (U16*)(ADDR + sector*SECTOR_SIZE + data_index * 0x02);
   \   00000002   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0xF44F 0x7100      MOV      R1,#+512
   \   0000000C   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000010   0x0052             LSLS     R2,R2,#+1
   \   00000012   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000016   0xF510 0x3070      ADDS     R0,R0,#+245760
     49            return *addr;
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0xB002             ADD      SP,SP,#+8
   \   0000001E   0x4770             BX       LR               ;; return
     50          }
     51          
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void Flash_Data_Update(U16 sector){
   \                     Flash_Data_Update: (+1)
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     54            U8 i;
     55            for(i=0;i<DATA_NUM;i++){
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000000A   0xE012             B.N      ??Flash_Data_Update_0
     56              data[i] = Flash_Read(sector,i);
   \                     ??Flash_Data_Update_1: (+1)
   \   0000000C   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   \   00000010   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000001C   0x.... 0x....      BL       Flash_Read
   \   00000020   0x....             LDR.N    R1,??DataTable6
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0xF821 0x0014      STRH     R0,[R1, R4, LSL #+1]
     57            }
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??Flash_Data_Update_0: (+1)
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x2810             CMP      R0,#+16
   \   00000038   0xDBE8             BLT.N    ??Flash_Data_Update_1
     58          }
   \   0000003A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void Flash_Data_Reset(void){
   \                     Flash_Data_Reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     61            U16 i;
     62            for(i=0;i<DATA_NUM;i++){
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000008   0xE010             B.N      ??Flash_Data_Reset_0
     63              data[i] = data_initial[i];
   \                     ??Flash_Data_Reset_1: (+1)
   \   0000000A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000000E   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000012   0x....             LDR.N    R2,??DataTable6_1
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0xF832 0x1011      LDRH     R1,[R2, R1, LSL #+1]
   \   0000001A   0x....             LDR.N    R2,??DataTable6
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
     64            }
   \   00000022   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??Flash_Data_Reset_0: (+1)
   \   0000002C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xDBEA             BLT.N    ??Flash_Data_Reset_1
     65            Flash_Write(0);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       Flash_Write
     66          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
     67          
     68            // Init

   \                                 In section .text, align 2, keep-with-next
     69          void Flash_Init(void){
   \                     Flash_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70            FMC->PFB0CR|=FMC_PFB0CR_S_B_INV_MASK;
   \   00000002   0x....             LDR.N    R0,??DataTable6_2  ;; 0x4001f004
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000000A   0x....             LDR.N    R1,??DataTable6_2  ;; 0x4001f004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     71            FMC->PFB1CR|=FMC_PFB0CR_S_B_INV_MASK;
   \   0000000E   0x....             LDR.N    R0,??DataTable6_3  ;; 0x4001f008
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000016   0x....             LDR.N    R1,??DataTable6_3  ;; 0x4001f008
   \   00000018   0x6008             STR      R0,[R1, #+0]
     72            while(!(FTFL->FSTAT&FTFL_FSTAT_CCIF_MASK));
   \                     ??Flash_Init_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40020000
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x0600             LSLS     R0,R0,#+24
   \   00000020   0xD5FB             BPL.N    ??Flash_Init_0
     73            FTFL->FSTAT=FTFL_FSTAT_ACCERR_MASK|FTFL_FSTAT_FPVIOL_MASK;
   \   00000022   0x2030             MOVS     R0,#+48
   \   00000024   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40020000
   \   00000026   0x7008             STRB     R0,[R1, #+0]
     74            
     75            // check data_flag
     76            if(Flash_Read(0,0)!=1) Flash_Data_Reset();
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       Flash_Read
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD002             BEQ.N    ??Flash_Init_1
   \   00000034   0x.... 0x....      BL       Flash_Data_Reset
   \   00000038   0xE002             B.N      ??Flash_Init_2
     77            else Flash_Data_Update(0);
   \                     ??Flash_Init_1: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       Flash_Data_Update
     78          }
   \                     ??Flash_Init_2: (+1)
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
     79          
     80          
     81          
     82          // ======= Basic Drivers ======
     83          

   \                                 In section .text, align 2, keep-with-next
     84          U8 Flash_Erase(U16 num){
   \                     Flash_Erase: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     85            union{
     86              U32 Word;
     87              U8  Byte[4];
     88            }FlashDestination;
     89            FlashDestination.Word=ADDR+num*SECTOR_SIZE;
   \   00000004   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000008   0xF44F 0x7100      MOV      R1,#+512
   \   0000000C   0x4348             MULS     R0,R1,R0
   \   0000000E   0xF510 0x3070      ADDS     R0,R0,#+245760
   \   00000012   0x9000             STR      R0,[SP, #+0]
     90            FTFL->FCCOB0=FTFL_FCCOB0_CCOBn(ERSSCR);
   \   00000014   0x2009             MOVS     R0,#+9
   \   00000016   0x....             LDR.N    R1,??DataTable6_5  ;; 0x40020007
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     91            FTFL->FCCOB1=FlashDestination.Byte[2];
   \   0000001A   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000001E   0x....             LDR.N    R1,??DataTable6_6  ;; 0x40020006
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     92            FTFL->FCCOB2=FlashDestination.Byte[1];
   \   00000022   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000026   0x....             LDR.N    R1,??DataTable6_7  ;; 0x40020005
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     93            FTFL->FCCOB3=FlashDestination.Byte[0];
   \   0000002A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable6_8  ;; 0x40020004
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     94            if(FlashCMD()==1){return 1;}//Error
   \   00000032   0x.... 0x....      BL       FlashCMD
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD101             BNE.N    ??Flash_Erase_0
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE000             B.N      ??Flash_Erase_1
     95            return 0;//Success
   \                     ??Flash_Erase_0: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??Flash_Erase_1: (+1)
   \   00000040   0xBD0E             POP      {R1-R3,PC}       ;; return
     96          }
     97          

   \                                 In section .text, align 2, keep-with-next
     98          U8 Flash_Program(U16 num, U16 WriteCounter, U16 *DataSource){
   \                     Flash_Program: (+1)
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0014             MOVS     R4,R2
     99            U32 size;
    100            U32 destaddr;
    101            union{
    102              U32 Word;
    103              U8 Byte[4];
    104            }FlashDestination; 
    105            FTFL->FCCOB0=PGM4;
   \   00000006   0x2006             MOVS     R0,#+6
   \   00000008   0x....             LDR.N    R1,??DataTable6_5  ;; 0x40020007
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    106            destaddr=(ADDR+num*SECTOR_SIZE);
   \   0000000C   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000010   0xF44F 0x7100      MOV      R1,#+512
   \   00000014   0x4348             MULS     R0,R1,R0
   \   00000016   0xF510 0x3070      ADDS     R0,R0,#+245760
   \   0000001A   0x9000             STR      R0,[SP, #+0]
    107            FlashDestination.Word=destaddr;
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x9001             STR      R0,[SP, #+4]
    108            for(size=0;size<WriteCounter;size+=2,FlashDestination.Word+=4,DataSource+=2){
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0xE006             B.N      ??Flash_Program_0
   \                     ??Flash_Program_1: (+1)
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x1C80             ADDS     R0,R0,#+2
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0x1D00             ADDS     R0,R0,#+4
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x1D24             ADDS     R4,R4,#+4
   \                     ??Flash_Program_0: (+1)
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD221             BCS.N    ??Flash_Program_2
    109              FTFL->FCCOB1=FlashDestination.Byte[2];
   \   0000003E   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000042   0x....             LDR.N    R1,??DataTable6_6  ;; 0x40020006
   \   00000044   0x7008             STRB     R0,[R1, #+0]
    110              FTFL->FCCOB2=FlashDestination.Byte[1];
   \   00000046   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000004A   0x....             LDR.N    R1,??DataTable6_7  ;; 0x40020005
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    111              FTFL->FCCOB3=FlashDestination.Byte[0];
   \   0000004E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000052   0x....             LDR.N    R1,??DataTable6_8  ;; 0x40020004
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    112              FTFL->FCCOB4=DataSource[1]>>8;
   \   00000056   0x8860             LDRH     R0,[R4, #+2]
   \   00000058   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005A   0x0A00             LSRS     R0,R0,#+8
   \   0000005C   0x....             LDR.N    R1,??DataTable6_9  ;; 0x4002000b
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
    113              FTFL->FCCOB5=DataSource[1]&0xFF;
   \   00000060   0x8860             LDRH     R0,[R4, #+2]
   \   00000062   0x....             LDR.N    R1,??DataTable6_10  ;; 0x4002000a
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    114              FTFL->FCCOB6=DataSource[0]>>8;
   \   00000066   0x8820             LDRH     R0,[R4, #+0]
   \   00000068   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006A   0x0A00             LSRS     R0,R0,#+8
   \   0000006C   0x....             LDR.N    R1,??DataTable6_11  ;; 0x40020009
   \   0000006E   0x7008             STRB     R0,[R1, #+0]
    115              FTFL->FCCOB7=DataSource[0]&0xFF;    
   \   00000070   0x8820             LDRH     R0,[R4, #+0]
   \   00000072   0x....             LDR.N    R1,??DataTable6_12  ;; 0x40020008
   \   00000074   0x7008             STRB     R0,[R1, #+0]
    116              if(FlashCMD()==1)return 2;
   \   00000076   0x.... 0x....      BL       FlashCMD
   \   0000007A   0x2801             CMP      R0,#+1
   \   0000007C   0xD1D3             BNE.N    ??Flash_Program_1
   \   0000007E   0x2002             MOVS     R0,#+2
   \   00000080   0xE000             B.N      ??Flash_Program_3
    117            }
    118            return 0;
   \                     ??Flash_Program_2: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \                     ??Flash_Program_3: (+1)
   \   00000084   0xB004             ADD      SP,SP,#+16
   \   00000086   0xBD10             POP      {R4,PC}          ;; return
    119          }
    120          
    121          

   \                                 In section .text, align 2, keep-with-next
    122          static U8 FlashCMD(void){
    123            FTFL->FSTAT=FTFL_FSTAT_ACCERR_MASK|FTFL_FSTAT_FPVIOL_MASK;
   \                     FlashCMD: (+1)
   \   00000000   0x2030             MOVS     R0,#+48
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40020000
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    124            FTFL->FSTAT=FTFL_FSTAT_CCIF_MASK;
   \   00000006   0x2080             MOVS     R0,#+128
   \   00000008   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40020000
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    125            while(!(FTFL->FSTAT&FTFL_FSTAT_CCIF_MASK));
   \                     ??FlashCMD_0: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40020000
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD5FB             BPL.N    ??FlashCMD_0
    126            if(FTFL->FSTAT&(FTFL_FSTAT_ACCERR_MASK|FTFL_FSTAT_FPVIOL_MASK|FTFL_FSTAT_MGSTAT0_MASK)){return 1;}//Failed
   \   00000014   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40020000
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2131             MOVS     R1,#+49
   \   0000001A   0x4208             TST      R0,R1
   \   0000001C   0xD001             BEQ.N    ??FlashCMD_1
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE000             B.N      ??FlashCMD_2
    127            return 0;//Success
   \                     ??FlashCMD_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \                     ??FlashCMD_2: (+1)
   \   00000024   0x4770             BX       LR               ;; return
    128          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     `data`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     data_initial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x4001F004         DC32     0x4001f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x4001F008         DC32     0x4001f008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40020007         DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x40020006         DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x4002000B         DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x4002000A         DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x40020008         DC32     0x40020008

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   FlashCMD
       8   Flash_Data_Reset
         8   -> Flash_Write
      16   Flash_Data_Update
        16   -> Flash_Read
      16   Flash_Erase
        16   -> FlashCMD
       8   Flash_Init
         8   -> Flash_Data_Reset
         8   -> Flash_Data_Update
         8   -> Flash_Read
      24   Flash_Program
        24   -> FlashCMD
       8   Flash_Read
      16   Flash_Write
        16   -> Flash_Erase
        16   -> Flash_Program


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      38  FlashCMD
      60  Flash_Data_Reset
      60  Flash_Data_Update
      66  Flash_Erase
      66  Flash_Init
     136  Flash_Program
      32  Flash_Read
      46  Flash_Write
      32  data
      32  data_initial

 
  32 bytes in section .bss
  32 bytes in section .data
 556 bytes in section .text
 
 556 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: 4
