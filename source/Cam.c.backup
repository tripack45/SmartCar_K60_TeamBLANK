/*
Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
Date : 2015/12/01
License : MIT
*/

#include "includes.h"

#define VALID_COLS 98

// ====== Variables ======
// ---- Global ----
u8 cam_buffer[IMG_ROWS][IMG_COLS];

u32 cam_current_frame=0;
u32 cam_acquiring_frame=0;
u32 cam_last_valid_frame=0;
u32 cam_frame_diff=0;

// ---- Local ----
u8 cam_row = 0, img_row = 0;
u8 img_buffer[IMG_ROWS][VALID_COLS];

u8* current_buffer;
u8* sending_buffer;

u8 ender[]={0x88,0x88,0x88,0x00,0x00,0x00,0xff,0xff,0xff};



// ====== 

void Cam_Algorithm(){
  //img_row             :   Currently(To be) loading row of the frame
  //cam_current_frame   :   The frame currently being loaded.
  //img_row_used        :   The row currently processing
  //cam_current_frame   :   The frame currently under processing
                           //(Reciving or InAlgorithm
  //cam_acquiring_frame   :   Frame currently being loading.
  //cam_last_valid_frame : Last Consistent Frame
  //cam_frame_diff      : Difference of valid frames
  
  
  u32 img_row_used;
  u32 frame_check = 0;
  
  for(img_row_used = 0; img_row_used < IMG_ROWS; img_row_used++){
    // For every row:
    while( (img_row_used >= img_row % IMG_ROWS) 
        && (cam_current_frame == cam_acquiring_frame)  );
    //Cannot process on going row, wait until img_row over img_row_used
    //The current processing row must be the row just recieved
    if( img_row_used == 0 ) cam_current_frame = cam_acquiring_frame;
    //If this is the first row, tag the current processing frame
    for(int i=0; i < VALID_COLS; i++ )
         img_buffer[img_row_used][i]=cam_buffer[img_row_used][i];
    //Load this frame into my buffer
    if( img_row_used == IMG_ROWS - 1 ) 
        frame_check = cam_acquiring_frame - cam_current_frame -1;
    //If this is the last row, check if the frame is consistent
  }
  
  //HERE WE SUCESSFULLY LOADED ONE FRAME:
  if( frame_check == 0 ) {
    //This is a consistent frame:
    cam_frame_diff = cam_current_frame - cam_last_valid_frame;
    cam_last_valid_frame=cam_current_frame;
    Bluetooth_SendDataChunkSync((uint8 *)img_buffer,sizeof(img_buffer));
    LED1_Tog();
  }else{ //Frame_Inconsistence Detected!
    LED2_Tog(); //Flip the LED to indicate inconsistence frame
    //debug_num=frame_check; 
  }
}
  
/*
void OCam_Algorithm(){
  
  //=============================OLD CODE============================
  while( (img_row_used+1)%IMG_ROWS ==  img_row%IMG_ROWS); // wait for a new row received
  // -- Handle the row --
  if(img_row_used==0) cam_processed_frames=cam_acquired_frames;
  //Bluetooth_WriteDataChunk( &(cam_buffer[img_row_used][0]) , VALID_COLS );
  
  u8 i;
  for(i=0;i<VALID_COLS;i++)
    cam_tbuffer[img_row_used][i]=cam_buffer[img_row_used][i];
  
  //  -- The row is used --
  img_row_used++;
  if(img_row_used==IMG_ROWS){
    // One Frame is completed
    cam_process_diff=cam_acquired_frames - cam_processed_frames - 1 ;
    if(cam_process_diff!=0){
      LED2_Tog();
    }
  }
  img_row_used%=IMG_ROWS;
  //=================================OLD CODE===========================
}*/


// ====== Basic Drivers ======

void PORTC_IRQHandler(){
  if((PORTC->ISFR)&PORT_ISFR_ISF(1 << 8)){  //CS
    PORTC->ISFR |= PORT_ISFR_ISF(1 << 8);
    
    if(img_row < IMG_ROWS && cam_row % IMG_STEP == 0 ){
      DMA0->TCD[0].DADDR = (u32)&cam_buffer[img_row][0];
      ADC0->SC1[0] |= ADC_SC1_ADCH(4); //Restart ADC
      DMA0->TCD[0].CSR = DMA_CSR_DREQ_MASK | DMA_CSR_INTMAJOR_MASK; //Enable Major Loop Int
      DMA0->ERQ |= DMA_ERQ_ERQ0_MASK; //Enable DMA0
    }
    cam_row++;
  }
  else if(PORTC->ISFR&PORT_ISFR_ISF(1 << 9)){   //VS
    PORTC->ISFR |= PORT_ISFR_ISF(1 << 9);
    cam_row = img_row = 0;
    cam_acquiring_frame++;
  }
}

void DMA0_IRQHandler(){
  DMA0->CINT &= ~DMA_CINT_CINT(7); //Clear DMA0 Interrupt Flag
  img_row++; 
  //debug_num=img_row;
}

void Cam_Init(){
  
  // --- IO ---
  
  PORTC->PCR[8] |= PORT_PCR_MUX(1); //cs
  PORTC->PCR[9] |= PORT_PCR_MUX(1); //vs
  PORTC->PCR[11] |= PORT_PCR_MUX(1);    //oe
  PTC->PDDR &=~(3<<8);
  PTC->PDDR &=~(1<<11);
  PORTC->PCR[8] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK | PORT_PCR_IRQC(10);	//PULLUP | falling edge
  PORTC->PCR[9] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK | PORT_PCR_IRQC(9);  // rising edge
  PORTC->PCR[11] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK ;
  
  NVIC_EnableIRQ(PORTC_IRQn);
  NVIC_SetPriority(PORTC_IRQn, NVIC_EncodePriority(NVIC_GROUP, 1, 2));
  
  // --- AD ---
  
  /*
  SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;  //ADC1 Clock Enable
  ADC0->CFG1 |= 0
             //|ADC_CFG1_ADLPC_MASK
             | ADC_CFG1_ADICLK(1)
             | ADC_CFG1_MODE(0);     // 8 bits
             //| ADC_CFG1_ADIV(0);
  ADC0->CFG2 |= //ADC_CFG2_ADHSC_MASK |
                ADC_CFG2_MUXSEL_MASK |  // b
                ADC_CFG2_ADACKEN_MASK; 
  
  ADC0->SC1[0]&=~ADC_SC1_AIEN_MASK;//disenble interrupt
  
  ADC0->SC2 |= ADC_SC2_DMAEN_MASK; //DMA
  
  ADC0->SC3 |= ADC_SC3_ADCO_MASK; // continuous
  
  //PORTC->PCR[2]|=PORT_PCR_MUX(0);//adc1-4a
  
  ADC0->SC1[0] |= ADC_SC1_ADCH(4);
  */
  
  SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; //ADC1 Clock Enable
  ADC0->SC1[0] &= ~ADC_SC1_AIEN_MASK; //ADC1A
  ADC0->SC1[0] = 0x00000000; //Clear
  ADC0->SC1[0] |= ADC_SC1_ADCH(4); //ADC1_5->Input, Single Pin, No interrupt
  ADC0->SC1[1] &= ~ADC_SC1_AIEN_MASK; //ADC1B
  ADC0->SC1[1] |= ADC_SC1_ADCH(4); //ADC1_5b
  ADC0->SC2 &= 0x00000000; //Clear all.
  ADC0->SC2 |= ADC_SC2_DMAEN_MASK; //DMA, SoftWare
  ADC0->SC3 &= (~ADC_SC3_AVGE_MASK&~ADC_SC3_AVGS_MASK); //hardware average disabled
  ADC0->SC3 |= ADC_SC3_ADCO_MASK; //Continuous conversion enable
  ADC0->CFG1|=ADC_CFG1_ADICLK(1)|ADC_CFG1_MODE(0)|ADC_CFG1_ADIV(0);//InputClk, ShortTime, 8bits, Bus
  ADC0->CFG2 |= ADC_CFG2_MUXSEL_MASK; //ADC1  b
  ADC0->CFG2 |= ADC_CFG2_ADACKEN_MASK; //OutputClock
    
  // --- DMA ---
  
  SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK; //DMAMUX Clock Enable
  SIM->SCGC7 |= SIM_SCGC7_DMA_MASK; //DMA Clock Enable
  DMAMUX->CHCFG[0] |= DMAMUX_CHCFG_SOURCE(40); //DMA0->No.40 request, ADC0
  DMA0->TCD[0].SADDR = (uint32_t) & (ADC0->R[0]); //Source Address 0x400B_B010h
  DMA0->TCD[0].SOFF = 0; //Source Fixed
  DMA0->TCD[0].ATTR = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0); //Source 8 bits, Aim 8 bits
  DMA0->TCD[0].NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(1); //one byte each
  DMA0->TCD[0].SLAST = 0; //Last Source fixed
  DMA0->TCD[0].DADDR = (u32)cam_buffer;
  DMA0->TCD[0].DOFF = 1;
  DMA0->TCD[0].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(IMG_COLS);
  DMA0->TCD[0].DLAST_SGA = 0;
  DMA0->TCD[0].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(IMG_COLS);
  DMA0->TCD[0].CSR = 0x00000000; //Clear
  DMA0->TCD[0].CSR |= DMA_CSR_DREQ_MASK; //Auto Clear
  DMA0->TCD[0].CSR |= DMA_CSR_INTMAJOR_MASK; //Enable Major Loop Int
  DMA0->DCHPRI0 = DMA_DCHPRI1_CHPRI(1);
  DMA0->DCHPRI1 = DMA_DCHPRI1_CHPRI(0); //Exchange the DMA Priority of CH0 and CH1
  DMA0->INT |= DMA_INT_INT0_MASK; //Open Interrupt
  //DMA->ERQ&=~DMA_ERQ_ERQ0_MASK;//Clear Disable
  DMAMUX->CHCFG[0] |= DMAMUX_CHCFG_ENBL_MASK; //Enable
  
  NVIC_EnableIRQ(DMA0_IRQn);
  NVIC_SetPriority(DMA0_IRQn, NVIC_EncodePriority(NVIC_GROUP, 1, 2));
  
}